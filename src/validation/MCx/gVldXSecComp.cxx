//____________________________________________________________________________
/*!

\program gvld_xsec_comp

\brief   A GENIE utility that reads-in GENIE cross section files and 
         generates comparisons plots.

         Syntax:
           gvld_xsec_comp -f xsec_file [-r reference_xsec_file] [-o output]

         Options:
           [] Denotes an optional argument.
           -f Specifies a ROOT file with GENIE cross section graphs.
	   -r Specifies a reference file with GENIE cross section graphs.
           -o Specifies the output filename [default: gxsec.ps]

         Notes:
           The input ROOT files are the ones generated by GENIE's gspl2root
           utility. See the GENIE User Manual for more details.
           	      
         Example:
           To compare cross sections in xsec-v2_4.root and xsec-v2_2.root
           type:
           shell$ gvld_xsec_comp -f xsec-v2_4.root -r xsec-v2_2.root 
		      
\author  Costas Andreopoulos <costas.andreopoulos \at stfc.ac.uk>
         STFC, Rutherford Appleton Laboratory

\created June 06, 2008 

\cpright Copyright (c) 2003-2013, GENIE Neutrino MC Generator Collaboration
         For the full text of the license visit http://copyright.genie-mc.org
         or see $GENIE/LICENSE
*/
//____________________________________________________________________________

#include <cassert>
#include <sstream>
#include <string>
#include <vector>

#include <TSystem.h>
#include <TFile.h>
#include <TDirectory.h>
#include <TGraph.h>
#include <TPostScript.h>
#include <TH1D.h>
#include <TMath.h>
#include <TCanvas.h>
#include <TPavesText.h>
#include <TText.h>
#include <TStyle.h>
#include <TLegend.h>
#include <TObjString.h>

#include "Conventions/GBuild.h"
#include "Messenger/Messenger.h"
#include "Numerical/RandomGen.h"
#include "PDG/PDGUtils.h"
#include "PDG/PDGCodes.h"
#include "Utils/CmdLnArgParser.h"
#include "Utils/Style.h"

using std::ostringstream;
using std::string;
using std::vector;

using namespace genie;

// function prototypes
void    Init               (void);
void    End                (void);
void    OpenDir            (void);
void    DirNameToProbe     (void);
void    DirNameToTarget    (void);
void    MakePlots          (void);
void    MakePlotsCurrDir   (void);
void    AddCoverPage       (void);
TH1F *  DrawFrame          (TGraph * gr0, TGraph * gr1);
TH1F *  DrawFrame          (double xmin, double xmax, double ymin, double yman);
void    Draw               (const char * plot, const char * title);
void    Draw               (TGraph* gr, const char * opt);
TGraph* TrimGraph          (TGraph * gr, int max_np_per_decade);
void    GetCommandLineArgs (int argc, char ** argv);
void    PrintSyntax        (void);
bool    CheckRootFilename  (string filename);
string  OutputFileName     (string input_file_name);

// command-line arguments
string gOptXSecFilename_curr = "";  // (-f) input ROOT cross section file
string gOptXSecFilename_ref0 = "";  // (-r) input ROOT cross section file (ref.)
string gOptOutputFilename    = "";  // (-o) output PS file
bool   gOptHaveRef;

// globals
TFile *       gXSecFile_curr        = 0;
TFile *       gXSecFile_ref0        = 0;
TDirectory *  gDirCurr              = 0;
TDirectory *  gDirRef0              = 0;
string        gDirName              = "";
TPostScript * gPS                   = 0;
TCanvas *     gC                    = 0;
TLegend *     gL                    = 0;
TLegend *     gLS                   = 0;
string        gCurrProbeLbl         = "";
int           gCurrProbePdg         = 0;
bool          gCurrProbeIsNu        = false;
bool          gCurrProbeIsNuBar     = false;
string        gCurrTargetLbl        = "";
bool          gCurrTargetHasP       = false;
bool          gCurrTargetHasN       = false;
bool          gCurrTargetIsFreeNuc  = false;

//_________________________________________________________________________________
int main(int argc, char ** argv)
{
  GetCommandLineArgs (argc,argv);
  utils::style::SetDefaultStyle();
  Init();
  MakePlots();
  End();
  
  LOG("gvldtest", pINFO)  << "Done!";

  return 0;
}
//_________________________________________________________________________________
void Init(void)
{
  gC = new TCanvas("c","",20,20,500,650);
  gC->SetBorderMode(0);
  gC->SetFillColor(0);
  gC->SetGridx();
  gC->SetGridy();
  gC->SetLogx();
  gC->SetLogy();

  gL  = new TLegend(0.80,0.20,0.99,0.99);
  gLS = new TLegend(0.15,0.85,0.55,0.95);

  gL  -> SetFillColor(0);
  gLS -> SetFillColor(0);
  gLS -> SetBorderSize(1);

  // create output file
  gPS = new TPostScript(gOptOutputFilename.c_str(), 111);

  // front page
  gPS->NewPage();

  gC->SetLogx(0);
  gC->SetLogy(0);

  gC->Range(0,0,100,100);
  TPavesText hdr(10,40,90,70,3,"tr");
  hdr.AddText("GENIE cross sections");
  hdr.AddText(" ");
  hdr.AddText(" ");
  hdr.AddText("Plotting data from: ");
  hdr.AddText(gOptXSecFilename_curr.c_str());
  if(gOptHaveRef) {
     hdr.AddText(" ");
     hdr.AddText("Comparing with reference data (red circles) from: ");
     hdr.AddText(gOptXSecFilename_ref0.c_str());
  } else {
     hdr.AddText(" ");
  }
  hdr.AddText(" ");
  hdr.AddText(" ");
  hdr.Draw();
  gC->Update();

  gC->SetLogx();
  gC->SetLogy();
}
//_________________________________________________________________________________
void End(void)
{
  gPS->Close();

  delete gC;
  delete gPS;
  delete gL;
  delete gLS;
}
//_________________________________________________________________________________
void AddCoverPage(void)
{
  gC->Clear();
  gC->SetLogx(0);
  gC->SetLogy(0);

  gPS->NewPage();

  gC->Range(0,0,100,100);
  TPavesText hdr(10,40,90,70,3,"tr");
  hdr.AddText(" ");
  hdr.AddText(gDirName.c_str());
  hdr.AddText(" ");
  hdr.Draw();
  gC->Update();

  gC->SetLogx();
  gC->SetLogy();
}
//_________________________________________________________________________________
void OpenDir(void)
{
  gDirCurr  = (TDirectory *) gXSecFile_curr->Get(gDirName.c_str());
  gDirRef0  = 0;
  if(gXSecFile_ref0) {
    gDirRef0 = (TDirectory *) gXSecFile_ref0->Get(gDirName.c_str());
  }

  if(!gDirRef0) {
    LOG("gvldtest", pINFO)  << "No reference plots will be shown.";
  }
}
//_________________________________________________________________________________
void DirNameToProbe(void)
{
// Figure out the probe type from the input directory name
//

  string dirname = gDirName;

  int    pdg     = 0;
  string label   = "";

  if( dirname.find ("nu_e_bar") != string::npos ) 
  { 
    label = "#bar{#nu_{e}}";    
    pdg   = kPdgAntiNuE;   
  }
  else 
  if ( dirname.find ("nu_e") != string::npos ) 
  { 
    label = "#nu_{e}";          
    pdg   = kPdgNuE;       
  }
  else 
  if ( dirname.find ("nu_mu_bar") != string::npos ) 
  { 
    label = "#bar{#nu_{#mu}}";  
    pdg   = kPdgAntiNuMu;  
  }
  else 
  if ( dirname.find ("nu_mu") != string::npos ) 
  { 
    label ="#nu_{#mu}";       
    pdg   = kPdgNuMu;      
  }
  else 
  if ( dirname.find ("nu_tau_bar") != string::npos ) 
  { 
    label = "#bar{#nu_{#tau}}"; 
    pdg   = kPdgAntiNuTau; 
  }
  else 
  if ( dirname.find ("nu_tau") != string::npos ) 
  { 
    label = "#nu_{#tau}";      
    pdg   = kPdgNuTau;     
  }

  gCurrProbeLbl     = label;
  gCurrProbePdg     = pdg;
  gCurrProbeIsNu    = pdg::IsNeutrino     (pdg);
  gCurrProbeIsNuBar = pdg::IsAntiNeutrino (pdg);
}
//_________________________________________________________________________________
void DirNameToTarget(void)
{
// Figure out the target type from the input directory name
//

  string label;
  string dirname = gDirName;

  if ( gCurrProbePdg == kPdgAntiNuE )  
  { 
    label = dirname.substr ( dirname.find("nu_e_bar")+9, dirname.length() ); 
  }
  else 
  if ( gCurrProbePdg == kPdgNuE )  
  { 
    label = dirname.substr ( dirname.find("nu_e")+5, dirname.length() ); 
  }
  else 
  if ( gCurrProbePdg == kPdgAntiNuMu )  
  { 
    label = dirname.substr ( dirname.find("nu_mu_bar")+10, dirname.length() ); 
  }
  else 
  if ( gCurrProbePdg == kPdgNuMu )  
  { 
    label = dirname.substr ( dirname.find("nu_mu")+6, dirname.length() ); 
  }
  else 
  if ( gCurrProbePdg == kPdgAntiNuTau )  
  { 
    label = dirname.substr ( dirname.find("nu_tau_bar")+11, dirname.length() ); 
  }
  else 
  if ( gCurrProbePdg == kPdgNuTau )  
  { 
    label = dirname.substr ( dirname.find("nu_tau")+7, dirname.length() ); 
  }

  bool free_n   = (label.size()==1 && label.find("n") !=string::npos);
  bool free_p   = (label.size()==2 && label.find("H1")!=string::npos);
  bool free_nuc = free_p || free_n;

  gCurrTargetHasP = (free_n) ? false : true;
  gCurrTargetHasN = (free_p) ? false : true;

  gCurrTargetLbl  = (free_nuc) ? "" : ("(" + label + ")");

  gCurrTargetIsFreeNuc  = free_nuc;
}
//_________________________________________________________________________________
void MakePlots(void)
{
  // Open files
  gXSecFile_curr = new TFile(gOptXSecFilename_curr.c_str(), "read");
  gXSecFile_ref0 = 0;
  if (gOptHaveRef) {
    gXSecFile_ref0 = new TFile(gOptXSecFilename_ref0.c_str(), "read");
  }

  // Get list of directories in the input file
  TList * directories = gXSecFile_curr->GetListOfKeys();

  // Loop over directories & generate plots for each one
  int ndir = directories->GetEntries();
  for(int idir=0; idir<ndir; idir++) {
    TObjString * dir = (TObjString*) directories->At(idir);
    gDirName = dir->GetString().Data();
    MakePlotsCurrDir();
  }
}
//_________________________________________________________________________________
void MakePlotsCurrDir(void)
{
  LOG("gvldtest", pINFO)  << "Plotting graphs from directory: " << gDirName;

  AddCoverPage    ();
  OpenDir         ();
  DirNameToProbe  ();
  DirNameToTarget ();

  const char * probestr  = gCurrProbeLbl.c_str();
  const char * targetstr = gCurrTargetLbl.c_str();

  LOG("gvldtest", pINFO)  << "Probe  : " << probestr;
  LOG("gvldtest", pINFO)  << "Target : " << targetstr;

  //
  // Start plotting...
  //

  if(!gCurrTargetIsFreeNuc) {
    Draw("tot_cc", Form("%s + %s, TOT CC",probestr,targetstr));
    Draw("tot_nc", Form("%s + %s, TOT NC",probestr,targetstr));
  }

  if(gCurrTargetHasN) {
      Draw("tot_cc_n",               Form("%s + n %s, TOT CC"                                , probestr, targetstr));
      Draw("tot_nc_n",               Form("%s + n %s, TOT NC"                                , probestr, targetstr));
    if(gCurrProbeIsNu) {
      Draw("qel_cc_n",               Form("%s + n %s, QEL CC"                                , probestr, targetstr));
    }
      Draw("qel_nc_n",               Form("%s + n %s, QEL NC"                                , probestr, targetstr));
      Draw("res_cc_n",               Form("%s + n %s, RES CC"                                , probestr, targetstr));
      Draw("res_nc_n",               Form("%s + n %s, RES NC"                                , probestr, targetstr));
      Draw("res_cc_n_1232P33",       Form("%s + n %s, RES CC, P33(1232)"                     , probestr, targetstr));
      Draw("res_cc_n_1535S11",       Form("%s + n %s, RES CC, S11(1535)"                     , probestr, targetstr));
      Draw("res_cc_n_1520D13",       Form("%s + n %s, RES CC, D13(1520)"                     , probestr, targetstr));
      Draw("res_cc_n_1650S11",       Form("%s + n %s, RES CC, S11(1650)"                     , probestr, targetstr));
      Draw("res_cc_n_1700D13",       Form("%s + n %s, RES CC, D13(1700)"                     , probestr, targetstr));
      Draw("res_cc_n_1675D15",       Form("%s + n %s, RES CC, D15(1675)"                     , probestr, targetstr));
      Draw("res_cc_n_1620S31",       Form("%s + n %s, RES CC, S31(1620)"                     , probestr, targetstr));
      Draw("res_cc_n_1700D33",       Form("%s + n %s, RES CC, D33(1700)"                     , probestr, targetstr));
      Draw("res_cc_n_1440P11",       Form("%s + n %s, RES CC, P11(1440)"                     , probestr, targetstr));
      Draw("res_cc_n_1720P13",       Form("%s + n %s, RES CC, P13(1720)"                     , probestr, targetstr));
      Draw("res_cc_n_1680F15",       Form("%s + n %s, RES CC, F15(1680)"                     , probestr, targetstr));
      Draw("res_cc_n_1910P31",       Form("%s + n %s, RES CC, P31(1910)"                     , probestr, targetstr));
      Draw("res_cc_n_1920P33",       Form("%s + n %s, RES CC, P33(1920)"                     , probestr, targetstr));
      Draw("res_cc_n_1905F35",       Form("%s + n %s, RES CC, F35(1905)"                     , probestr, targetstr));
      Draw("res_cc_n_1950F37",       Form("%s + n %s, RES CC, F37(1950)"                     , probestr, targetstr));
      Draw("res_cc_n_1710P11",       Form("%s + n %s, RES CC, P11(1710)"                     , probestr, targetstr));
      Draw("res_nc_n_1232P33",       Form("%s + n %s, RES NC, P33(1232)"                     , probestr, targetstr));
      Draw("res_nc_n_1535S11",       Form("%s + n %s, RES NC, S11(1535)"                     , probestr, targetstr));
      Draw("res_nc_n_1520D13",       Form("%s + n %s, RES NC, D13(1520)"                     , probestr, targetstr));
      Draw("res_nc_n_1650S11",       Form("%s + n %s, RES NC, S11(1650)"                     , probestr, targetstr));
      Draw("res_nc_n_1700D13",       Form("%s + n %s, RES NC, D13(1700)"                     , probestr, targetstr));
      Draw("res_nc_n_1675D15",       Form("%s + n %s, RES NC, D15(1675)"                     , probestr, targetstr));
      Draw("res_nc_n_1620S31",       Form("%s + n %s, RES NC, S31(1620)"                     , probestr, targetstr));
      Draw("res_nc_n_1700D33",       Form("%s + n %s, RES NC, D33(1700)"                     , probestr, targetstr));
      Draw("res_nc_n_1440P11",       Form("%s + n %s, RES NC, P11(1440)"                     , probestr, targetstr));
      Draw("res_nc_n_1720P13",       Form("%s + n %s, RES NC, P13(1720)"                     , probestr, targetstr));
      Draw("res_nc_n_1680F15",       Form("%s + n %s, RES NC, F15(1680)"                     , probestr, targetstr));
      Draw("res_nc_n_1910P31",       Form("%s + n %s, RES NC, P31(1910)"                     , probestr, targetstr));
      Draw("res_nc_n_1920P33",       Form("%s + n %s, RES NC, P33(1920)"                     , probestr, targetstr));
      Draw("res_nc_n_1905F35",       Form("%s + n %s, RES NC, F35(1905)"                     , probestr, targetstr));
      Draw("res_nc_n_1950F37",       Form("%s + n %s, RES NC, F37(1950)"                     , probestr, targetstr));
      Draw("res_nc_n_1710P11",       Form("%s + n %s, RES NC, P11(1710)"                     , probestr, targetstr));
      Draw("dis_cc_n",               Form("%s + n %s, DIS CC"                                , probestr, targetstr));
      Draw("dis_nc_n",               Form("%s + n %s, DIS NC"                                , probestr, targetstr));
    if(gCurrProbeIsNu) {    
      Draw("dis_cc_n_ubarsea",       Form("%s + n %s, DIS CC (#bar{u}_{sea})"                , probestr, targetstr));
      Draw("dis_cc_n_dval",          Form("%s + n %s, DIS CC (d_{val})"                      , probestr, targetstr));
      Draw("dis_cc_n_dsea",          Form("%s + n %s, DIS CC (d_{sea})"                      , probestr, targetstr));
      Draw("dis_cc_n_ssea",          Form("%s + n %s, DIS CC (s_{sea})"                      , probestr, targetstr));
    }
    if(gCurrProbeIsNuBar) {    
      Draw("dis_cc_n_sbarsea",       Form("%s + n %s, DIS CC (#bar{s}_{sea})"                , probestr, targetstr));
      Draw("dis_cc_n_dbarsea",       Form("%s + n %s, DIS CC (#bar{d}_{val})"                , probestr, targetstr));
      Draw("dis_cc_n_uval",          Form("%s + n %s, DIS CC (u_{val})"                      , probestr, targetstr));
      Draw("dis_cc_n_usea",          Form("%s + n %s, DIS CC (u_{sea})"                      , probestr, targetstr));
    }
      Draw("dis_nc_n_sbarsea",       Form("%s + n %s, DIS NC (#bar{s}_{sea})"                , probestr, targetstr));
      Draw("dis_nc_n_ubarsea",       Form("%s + n %s, DIS NC (#bar{u}_{sea})"                , probestr, targetstr));
      Draw("dis_nc_n_dbarsea",       Form("%s + n %s, DIS NC (#bar{d}_{sea})"                , probestr, targetstr));
      Draw("dis_nc_n_dval",          Form("%s + n %s, DIS NC (d_{val})"                      , probestr, targetstr));
      Draw("dis_nc_n_dsea",          Form("%s + n %s, DIS NC (d_{sea})"                      , probestr, targetstr));
      Draw("dis_nc_n_uval",          Form("%s + n %s, DIS NC (u_{val})"                      , probestr, targetstr));
      Draw("dis_nc_n_usea",          Form("%s + n %s, DIS NC (u_{sea})"                      , probestr, targetstr));
      Draw("dis_nc_n_ssea",          Form("%s + n %s, DIS NC (s_{sea})"                      , probestr, targetstr));
    if(gCurrProbeIsNu) {    
      Draw("dis_cc_n_dval_charm",    Form("%s + n %s, DIS CC (d_{val} -> c)"                 , probestr, targetstr));
      Draw("dis_cc_n_dsea_charm",    Form("%s + n %s, DIS CC (d_{sea} -> c)"                 , probestr, targetstr));
      Draw("dis_cc_n_ssea_charm",    Form("%s + n %s, DIS CC (s_{sea} -> c)"                 , probestr, targetstr));
    }
    if(gCurrProbeIsNuBar) {    
      Draw("dis_cc_n_dbarsea_charm", Form("%s + n %s, DIS CC (#bar{d}_{sea} -> #bar{c})"     , probestr, targetstr));
      Draw("dis_cc_n_sbarsea_charm", Form("%s + n %s, DIS CC (#bar{s}_{sea} -> #bar{c})"     , probestr, targetstr));
    }
  }//N>0?


  if(gCurrTargetHasP) {
      Draw("tot_cc_p",               Form("%s + p %s, TOT CC"                                , probestr, targetstr));
      Draw("tot_nc_p",               Form("%s + p %s, TOT NC"                                , probestr, targetstr));
    if(gCurrProbeIsNuBar) {
      Draw("qel_cc_p",               Form("%s + p %s, QEL CC"                                , probestr, targetstr));
    }
      Draw("qel_nc_p",               Form("%s + p %s, QEL NC"                                , probestr, targetstr));
      Draw("res_cc_p",               Form("%s + p %s, RES CC"                                , probestr, targetstr));
      Draw("res_nc_p",               Form("%s + p %s, RES NC"                                , probestr, targetstr));
      Draw("res_cc_p_1232P33",       Form("%s + p %s, RES CC, P33(1232)"                     , probestr, targetstr));
      Draw("res_cc_p_1535S11",       Form("%s + p %s, RES CC, S11(1535)"                     , probestr, targetstr));
      Draw("res_cc_p_1520D13",       Form("%s + p %s, RES CC, D13(1520)"                     , probestr, targetstr));
      Draw("res_cc_p_1650S11",       Form("%s + p %s, RES CC, S11(1650)"                     , probestr, targetstr));
      Draw("res_cc_p_1700D13",       Form("%s + p %s, RES CC, D13(1700)"                     , probestr, targetstr));
      Draw("res_cc_p_1675D15",       Form("%s + p %s, RES CC, D15(1675)"                     , probestr, targetstr));
      Draw("res_cc_p_1620S31",       Form("%s + p %s, RES CC, S31(1620)"                     , probestr, targetstr));
      Draw("res_cc_p_1700D33",       Form("%s + p %s, RES CC, D33(1700)"                     , probestr, targetstr));
      Draw("res_cc_p_1440P11",       Form("%s + p %s, RES CC, P11(1440)"                     , probestr, targetstr));
      Draw("res_cc_p_1720P13",       Form("%s + p %s, RES CC, P13(1720)"                     , probestr, targetstr));
      Draw("res_cc_p_1680F15",       Form("%s + p %s, RES CC, F15(1680)"                     , probestr, targetstr));
      Draw("res_cc_p_1910P31",       Form("%s + p %s, RES CC, P31(1910)"                     , probestr, targetstr));
      Draw("res_cc_p_1920P33",       Form("%s + p %s, RES CC, P33(1920)"                     , probestr, targetstr));
      Draw("res_cc_p_1905F35",       Form("%s + p %s, RES CC, F35(1905)"                     , probestr, targetstr));
      Draw("res_cc_p_1950F37",       Form("%s + p %s, RES CC, F37(1950)"                     , probestr, targetstr));
      Draw("res_cc_p_1710P11",       Form("%s + p %s, RES CC, P11(1710)"                     , probestr, targetstr));
      Draw("res_nc_p_1232P33",       Form("%s + p %s, RES NC, P33(1232)"                     , probestr, targetstr));
      Draw("res_nc_p_1535S11",       Form("%s + p %s, RES NC, S11(1535)"                     , probestr, targetstr));
      Draw("res_nc_p_1520D13",       Form("%s + p %s, RES NC, D13(1520)"                     , probestr, targetstr));
      Draw("res_nc_p_1650S11",       Form("%s + p %s, RES NC, S11(1650)"                     , probestr, targetstr));
      Draw("res_nc_p_1700D13",       Form("%s + p %s, RES NC, D13(1700)"                     , probestr, targetstr));
      Draw("res_nc_p_1675D15",       Form("%s + p %s, RES NC, D15(1675)"                     , probestr, targetstr));
      Draw("res_nc_p_1620S31",       Form("%s + p %s, RES NC, S31(1620)"                     , probestr, targetstr));
      Draw("res_nc_p_1700D33",       Form("%s + p %s, RES NC, D33(1700)"                     , probestr, targetstr));
      Draw("res_nc_p_1440P11",       Form("%s + p %s, RES NC, P11(1440)"                     , probestr, targetstr));
      Draw("res_nc_p_1720P13",       Form("%s + p %s, RES NC, P13(1720)"                     , probestr, targetstr));
      Draw("res_nc_p_1680F15",       Form("%s + p %s, RES NC, F15(1680)"                     , probestr, targetstr));
      Draw("res_nc_p_1910P31",       Form("%s + p %s, RES NC, P31(1910)"                     , probestr, targetstr));
      Draw("res_nc_p_1920P33",       Form("%s + p %s, RES NC, P33(1920)"                     , probestr, targetstr));
      Draw("res_nc_p_1905F35",       Form("%s + p %s, RES NC, F35(1905)"                     , probestr, targetstr));
      Draw("res_nc_p_1950F37",       Form("%s + p %s, RES NC, F37(1950)"                     , probestr, targetstr));
      Draw("res_nc_p_1710P11",       Form("%s + p %s, RES NC, P11(1710)"                     , probestr, targetstr));
      Draw("dis_cc_p",               Form("%s + p %s, DIS CC"                                , probestr, targetstr));
      Draw("dis_nc_p",               Form("%s + p %s, DIS NC"                                , probestr, targetstr));
    if(gCurrProbeIsNu) {    
      Draw("dis_cc_p_ubarsea",       Form("%s + p %s, DIS CC (#bar{u}_{sea})"                , probestr, targetstr));
      Draw("dis_cc_p_dval",          Form("%s + p %s, DIS CC (d_{val})"                      , probestr, targetstr));
      Draw("dis_cc_p_dsea",          Form("%s + p %s, DIS CC (d_{sea})"                      , probestr, targetstr));
      Draw("dis_cc_p_ssea",          Form("%s + p %s, DIS CC (s_{sea})"                      , probestr, targetstr));
    }
    if(gCurrProbeIsNuBar) {    
      Draw("dis_cc_n_sbarsea",       Form("%s + n %s, DIS CC (#bar{s}_{sea})"                , probestr, targetstr));
      Draw("dis_cc_n_dbarsea",       Form("%s + n %s, DIS CC (#bar{d}_{val})"                , probestr, targetstr));
      Draw("dis_cc_n_uval",          Form("%s + n %s, DIS CC (u_{val})"                      , probestr, targetstr));
      Draw("dis_cc_n_usea",          Form("%s + n %s, DIS CC (u_{sea})"                      , probestr, targetstr));
    }
      Draw("dis_nc_p_sbarsea",       Form("%s + p %s, DIS NC (#bar{s}_{sea})"                , probestr, targetstr));
      Draw("dis_nc_p_ubarsea",       Form("%s + p %s, DIS NC (#bar{u}_{sea})"                , probestr, targetstr));
      Draw("dis_nc_p_dbarsea",       Form("%s + p %s, DIS NC (#bar{d}_{sea})"                , probestr, targetstr));
      Draw("dis_nc_p_dval",          Form("%s + p %s, DIS NC (d_{val})"                      , probestr, targetstr));
      Draw("dis_nc_p_dsea",          Form("%s + p %s, DIS NC (d_{sea})"                      , probestr, targetstr));
      Draw("dis_nc_p_uval",          Form("%s + p %s, DIS NC (u_{val})"                      , probestr, targetstr));
      Draw("dis_nc_p_usea",          Form("%s + p %s, DIS NC (u_{sea})"                      , probestr, targetstr));
      Draw("dis_nc_p_ssea",          Form("%s + p %s, DIS NC (s_{sea})"                      , probestr, targetstr));
    if(gCurrProbeIsNu) {    
      Draw("dis_cc_p_dval_charm",    Form("%s + p %s, DIS CC (d_{val} -> charm)"             , probestr, targetstr));
      Draw("dis_cc_p_dsea_charm",    Form("%s + p %s, DIS CC (d_{sea} -> charm)"             , probestr, targetstr));
      Draw("dis_cc_p_ssea_charm",    Form("%s + p %s, DIS CC (s_{sea} -> charm)"             , probestr, targetstr));
    }
    if(gCurrProbeIsNuBar) {    
      Draw("dis_cc_p_dbarsea_charm", Form("%s + p %s, DIS CC (#bar{d}_{sea} -> #bar{charm})" , probestr, targetstr));
      Draw("dis_cc_p_sbarsea_charm", Form("%s + p %s, DIS CC (#bar{s}_{sea} -> #bar{charm})" , probestr, targetstr));
    }
  }//Z>0



/*
  if(is_nu) {

    // RES CC v+p(A)
    {
          TGraph * gr_cc_p_tot_curr = (TGraph*) dir_curr->Get("res_cc_p");
          TGraph * gr_cc_p_1_curr   = (TGraph*) dir_curr->Get("res_cc_p_1232P33");
          TGraph * gr_cc_p_2_curr   = (TGraph*) dir_curr->Get("res_cc_p_1620S31");
          TGraph * gr_cc_p_3_curr   = (TGraph*) dir_curr->Get("res_cc_p_1700D33");
          TGraph * gr_cc_p_4_curr   = (TGraph*) dir_curr->Get("res_cc_p_1910P31");
          TGraph * gr_cc_p_5_curr   = (TGraph*) dir_curr->Get("res_cc_p_1920P33");
          TGraph * gr_cc_p_6_curr   = (TGraph*) dir_curr->Get("res_cc_p_1905F35");
          TGraph * gr_cc_p_7_curr   = (TGraph*) dir_curr->Get("res_cc_p_1950F37");
          TGraph * gr_cc_p_tot_ref0 = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_p")         : 0;
          TGraph * gr_cc_p_1_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_p_1232P33") : 0;
          TGraph * gr_cc_p_2_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_p_1620S31") : 0;
          TGraph * gr_cc_p_3_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_p_1700D33") : 0;
          TGraph * gr_cc_p_4_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_p_1910P31") : 0;
          TGraph * gr_cc_p_5_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_p_1920P33") : 0;
          TGraph * gr_cc_p_6_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_p_1905F35") : 0;
          TGraph * gr_cc_p_7_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_p_1950F37") : 0;
          utils::style::Format (gr_cc_p_1_curr,  2, -1, -1, -1,  -1,  -1.0);
          utils::style::Format (gr_cc_p_2_curr,  3, -1, -1, -1,  -1,  -1.0);
          utils::style::Format (gr_cc_p_3_curr,  4, -1, -1, -1,  -1,  -1.0);
          utils::style::Format (gr_cc_p_4_curr,  5, -1, -1, -1,  -1,  -1.0);
          utils::style::Format (gr_cc_p_5_curr,  6, -1, -1, -1,  -1,  -1.0);
          utils::style::Format (gr_cc_p_6_curr,  7, -1, -1, -1,  -1,  -1.0);
          utils::style::Format (gr_cc_p_7_curr,  8, -1, -1, -1,  -1,  -1.0);
          utils::style::Format (gr_cc_p_1_ref0, -1, -1, -1,  2,  23,   1.3);
          utils::style::Format (gr_cc_p_2_ref0, -1, -1, -1,  3,  23,   1.3);
          utils::style::Format (gr_cc_p_3_ref0, -1, -1, -1,  4,  23,   1.3);
          utils::style::Format (gr_cc_p_4_ref0, -1, -1, -1,  5,  23,   1.3);
          utils::style::Format (gr_cc_p_5_ref0, -1, -1, -1,  6,  23,   1.3);
          utils::style::Format (gr_cc_p_6_ref0, -1, -1, -1,  7,  23,   1.3);
          utils::style::Format (gr_cc_p_7_ref0, -1, -1, -1,  8,  23,   1.3);
          DrawFrame (gr_cc_p_tot_curr, gr_cc_p_tot_ref0, c);
          Draw (gr_cc_p_tot_curr, "L");
          Draw (gr_cc_p_1_curr,   "L");
          Draw (gr_cc_p_2_curr,   "L");
          Draw (gr_cc_p_3_curr,   "L");
          Draw (gr_cc_p_4_curr,   "L");
          Draw (gr_cc_p_5_curr,   "L");
          Draw (gr_cc_p_6_curr,   "L");
          Draw (gr_cc_p_7_curr,   "L");
          Draw (gr_cc_p_tot_ref0, "P");
          Draw (gr_cc_p_1_ref0,   "P");
          Draw (gr_cc_p_2_ref0,   "P");
          Draw (gr_cc_p_3_ref0,   "P");
          Draw (gr_cc_p_4_ref0,   "P");
          Draw (gr_cc_p_5_ref0,   "P");
          Draw (gr_cc_p_6_ref0,   "P");
          Draw (gr_cc_p_7_ref0,   "P");
          l->AddEntry(gr_cc_p_tot_curr, "total",     "L");
          l->AddEntry(gr_cc_p_1_curr,   "P33(1232)", "L");
          l->AddEntry(gr_cc_p_2_curr,   "S31(1620)", "L");
          l->AddEntry(gr_cc_p_3_curr,   "D33(1700)", "L");
          l->AddEntry(gr_cc_p_4_curr,   "P31(1910)", "L");
          l->AddEntry(gr_cc_p_5_curr,   "P33(1920)", "L");
          l->AddEntry(gr_cc_p_6_curr,   "F35(1905)", "L");
          l->AddEntry(gr_cc_p_7_curr,   "P37(1950)", "L");
          l->Draw();
          ls->Clear();
          ls->SetHeader(Form("RES-CC / %s+p%s",probestr,targetstr));
          ls->Draw();
          c->Update();
    }
    // RES CC v+n(A)
    {
          TGraph * gr_cc_n_tot_curr = (TGraph*) dir_curr->Get("res_cc_n");
          TGraph * gr_cc_n_1_curr   = (TGraph*) dir_curr->Get("res_cc_n_1232P33");
          TGraph * gr_cc_n_2_curr   = (TGraph*) dir_curr->Get("res_cc_n_1535S11");
          TGraph * gr_cc_n_3_curr   = (TGraph*) dir_curr->Get("res_cc_n_1520D13");
          TGraph * gr_cc_n_4_curr   = (TGraph*) dir_curr->Get("res_cc_n_1650S11");
          TGraph * gr_cc_n_5_curr   = (TGraph*) dir_curr->Get("res_cc_n_1700D13");
          TGraph * gr_cc_n_6_curr   = (TGraph*) dir_curr->Get("res_cc_n_1675D15");
          TGraph * gr_cc_n_7_curr   = (TGraph*) dir_curr->Get("res_cc_n_1620S31");
          TGraph * gr_cc_n_8_curr   = (TGraph*) dir_curr->Get("res_cc_n_1700D33");
          TGraph * gr_cc_n_9_curr   = (TGraph*) dir_curr->Get("res_cc_n_1440P11");
          TGraph * gr_cc_n_10_curr  = (TGraph*) dir_curr->Get("res_cc_n_1720P13");
          TGraph * gr_cc_n_11_curr  = (TGraph*) dir_curr->Get("res_cc_n_1680F15");
          TGraph * gr_cc_n_12_curr  = (TGraph*) dir_curr->Get("res_cc_n_1910P31");
          TGraph * gr_cc_n_13_curr  = (TGraph*) dir_curr->Get("res_cc_n_1920P33");
          TGraph * gr_cc_n_14_curr  = (TGraph*) dir_curr->Get("res_cc_n_1905F35");
          TGraph * gr_cc_n_15_curr  = (TGraph*) dir_curr->Get("res_cc_n_1950F37");
          TGraph * gr_cc_n_16_curr  = (TGraph*) dir_curr->Get("res_cc_n_1710P11");
          TGraph * gr_cc_n_tot_ref0 = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n")         : 0;
          TGraph * gr_cc_n_1_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1232P33") : 0;
          TGraph * gr_cc_n_2_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1535S11") : 0;
          TGraph * gr_cc_n_3_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1520D13") : 0;
          TGraph * gr_cc_n_4_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1650S11") : 0;
          TGraph * gr_cc_n_5_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1700D13") : 0;
          TGraph * gr_cc_n_6_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1675D15") : 0;
          TGraph * gr_cc_n_7_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1620S31") : 0;
          TGraph * gr_cc_n_8_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1700D33") : 0;
          TGraph * gr_cc_n_9_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1440P11") : 0;
          TGraph * gr_cc_n_10_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1720P13") : 0;
          TGraph * gr_cc_n_11_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1680F15") : 0;
          TGraph * gr_cc_n_12_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1910P31") : 0;
          TGraph * gr_cc_n_13_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1920P33") : 0;
          TGraph * gr_cc_n_14_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1905F35") : 0;
          TGraph * gr_cc_n_15_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1950F37") : 0;
          TGraph * gr_cc_n_16_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1710P11") : 0;
          utils::style::Format (gr_cc_n_1_curr,   2,  1,  -1,  -1, -1, -1.0); 
          utils::style::Format (gr_cc_n_2_curr,   3,  1,  -1,  -1, -1, -1.0); 
          utils::style::Format (gr_cc_n_3_curr,   4,  1,  -1,  -1, -1, -1.0); 
          utils::style::Format (gr_cc_n_4_curr,   5,  1,  -1,  -1, -1, -1.0); 
          utils::style::Format (gr_cc_n_5_curr,   6,  1,  -1,  -1, -1, -1.0); 
          utils::style::Format (gr_cc_n_6_curr,   7,  1,  -1,  -1, -1, -1.0); 
          utils::style::Format (gr_cc_n_7_curr,   8,  1,  -1,  -1, -1, -1.0); 
          utils::style::Format (gr_cc_n_8_curr,   9,  1,  -1,  -1, -1, -1.0); 
          utils::style::Format (gr_cc_n_9_curr,   2,  2,  -1,  -1, -1, -1.0); 
          utils::style::Format (gr_cc_n_10_curr,  3,  2,  -1,  -1, -1, -1.0); 
          utils::style::Format (gr_cc_n_11_curr,  4,  2,  -1,  -1, -1, -1.0); 
          utils::style::Format (gr_cc_n_12_curr,  5,  2,  -1,  -1, -1, -1.0); 
          utils::style::Format (gr_cc_n_13_curr,  6,  2,  -1,  -1, -1, -1.0); 
          utils::style::Format (gr_cc_n_14_curr,  7,  2,  -1,  -1, -1, -1.0); 
          utils::style::Format (gr_cc_n_15_curr,  8,  2,  -1,  -1, -1, -1.0); 
          utils::style::Format (gr_cc_n_16_curr,  9,  2,  -1,  -1, -1, -1.0); 
          utils::style::Format (gr_cc_n_1_ref0,  -1,  1,  -1,  2,  23,  1.3); 
          utils::style::Format (gr_cc_n_2_ref0,  -1,  1,  -1,  3,  23,  1.3); 
          utils::style::Format (gr_cc_n_3_ref0,  -1,  1,  -1,  4,  23,  1.3); 
          utils::style::Format (gr_cc_n_4_ref0,  -1,  1,  -1,  5,  23,  1.3); 
          utils::style::Format (gr_cc_n_5_ref0,  -1,  1,  -1,  6,  23,  1.3); 
          utils::style::Format (gr_cc_n_6_ref0,  -1,  1,  -1,  7,  23,  1.3); 
          utils::style::Format (gr_cc_n_7_ref0,  -1,  1,  -1,  8,  23,  1.3); 
          utils::style::Format (gr_cc_n_8_ref0,  -1,  1,  -1,  9,  23,  1.3); 
          utils::style::Format (gr_cc_n_9_ref0,  -1,  2,  -1,  2,  22,  1.3); 
          utils::style::Format (gr_cc_n_10_ref0, -1,  2,  -1,  3,  22,  1.3); 
          utils::style::Format (gr_cc_n_11_ref0, -1,  2,  -1,  4,  22,  1.3); 
          utils::style::Format (gr_cc_n_12_ref0, -1,  2,  -1,  5,  22,  1.3); 
          utils::style::Format (gr_cc_n_13_ref0, -1,  2,  -1,  6,  22,  1.3); 
          utils::style::Format (gr_cc_n_14_ref0, -1,  2,  -1,  7,  22,  1.3); 
          utils::style::Format (gr_cc_n_15_ref0, -1,  2,  -1,  8,  22,  1.3); 
          utils::style::Format (gr_cc_n_16_ref0, -1,  2,  -1,  9,  22,  1.3); 
          DrawFrame (gr_cc_n_tot_curr, gr_cc_n_tot_ref0, c);
          Draw (gr_cc_n_tot_curr,  "L");
          Draw (gr_cc_n_1_curr,    "L");
          Draw (gr_cc_n_2_curr,    "L");
          Draw (gr_cc_n_3_curr,    "L");
          Draw (gr_cc_n_4_curr,    "L");
          Draw (gr_cc_n_5_curr,    "L");
          Draw (gr_cc_n_6_curr,    "L");
          Draw (gr_cc_n_7_curr,    "L");
          Draw (gr_cc_n_8_curr,    "L");
          Draw (gr_cc_n_9_curr,    "L");
          Draw (gr_cc_n_10_curr,   "L");
          Draw (gr_cc_n_11_curr,   "L");
          Draw (gr_cc_n_12_curr,   "L");
          Draw (gr_cc_n_13_curr,   "L");
          Draw (gr_cc_n_14_curr,   "L");
          Draw (gr_cc_n_15_curr,   "L");
          Draw (gr_cc_n_16_curr,   "L");
          Draw (gr_cc_n_tot_ref0,  "P");
          Draw (gr_cc_n_1_ref0,    "P");
          Draw (gr_cc_n_2_ref0,    "P");
          Draw (gr_cc_n_3_ref0,    "P");
          Draw (gr_cc_n_4_ref0,    "P");
          Draw (gr_cc_n_5_ref0,    "P");
          Draw (gr_cc_n_6_ref0,    "P");
          Draw (gr_cc_n_7_ref0,    "P");
          Draw (gr_cc_n_8_ref0,    "P");
          Draw (gr_cc_n_9_ref0,    "P");
          Draw (gr_cc_n_10_ref0,   "P");
          Draw (gr_cc_n_11_ref0,   "P");
          Draw (gr_cc_n_12_ref0,   "P");
          Draw (gr_cc_n_13_ref0,   "P");
          Draw (gr_cc_n_14_ref0,   "P");
          Draw (gr_cc_n_15_ref0,   "P");
          Draw (gr_cc_n_16_ref0,   "P");
          l->Clear();
          l->AddEntry(gr_cc_n_tot_curr,  "total",     "L");
          l->AddEntry(gr_cc_n_1_curr,    "(1232)P33", "L");
          l->AddEntry(gr_cc_n_2_curr,    "(1535)S11", "L");
          l->AddEntry(gr_cc_n_3_curr,    "(1520)D13", "L");
          l->AddEntry(gr_cc_n_4_curr,    "(1650)S11", "L");
          l->AddEntry(gr_cc_n_5_curr,    "(1700)D13", "L");
          l->AddEntry(gr_cc_n_6_curr,    "(1675)D15", "L");
          l->AddEntry(gr_cc_n_7_curr,    "(1620)S31", "L");
          l->AddEntry(gr_cc_n_8_curr,    "(1700)D33", "L");
          l->AddEntry(gr_cc_n_9_curr,    "(1440)P11", "L");
          l->AddEntry(gr_cc_n_10_curr,   "(1720)P13", "L");
          l->AddEntry(gr_cc_n_11_curr,   "(1680)F15", "L");
          l->AddEntry(gr_cc_n_12_curr,   "(1910)P31", "L");
          l->AddEntry(gr_cc_n_13_curr,   "(1920)P33", "L");
          l->AddEntry(gr_cc_n_14_curr,   "(1905)F35", "L");
          l->AddEntry(gr_cc_n_15_curr,   "(1950)F37", "L");
          l->AddEntry(gr_cc_n_16_curr,   "(1710)P11", "L");
          l->Draw();
          ls->Clear();
          ls->SetHeader(Form("RES-CC / %s+n%s",probestr,targetstr));
          ls->Draw();
	  c->Update();
     } 
     // RES NC v+p(A)
     {
          TGraph * gr_nc_p_tot_curr = (TGraph*) dir_curr->Get("res_nc_p");
          TGraph * gr_nc_p_1_curr   = (TGraph*) dir_curr->Get("res_nc_p_1232P33");
          TGraph * gr_nc_p_2_curr   = (TGraph*) dir_curr->Get("res_nc_p_1535S11");
          TGraph * gr_nc_p_3_curr   = (TGraph*) dir_curr->Get("res_nc_p_1520D13");
          TGraph * gr_nc_p_4_curr   = (TGraph*) dir_curr->Get("res_nc_p_1650S11");
          TGraph * gr_nc_p_5_curr   = (TGraph*) dir_curr->Get("res_nc_p_1700D13");
          TGraph * gr_nc_p_6_curr   = (TGraph*) dir_curr->Get("res_nc_p_1675D15");
          TGraph * gr_nc_p_7_curr   = (TGraph*) dir_curr->Get("res_nc_p_1620S31");
          TGraph * gr_nc_p_8_curr   = (TGraph*) dir_curr->Get("res_nc_p_1700D33");
          TGraph * gr_nc_p_9_curr   = (TGraph*) dir_curr->Get("res_nc_p_1440P11");
          TGraph * gr_nc_p_10_curr  = (TGraph*) dir_curr->Get("res_nc_p_1720P13");
          TGraph * gr_nc_p_11_curr  = (TGraph*) dir_curr->Get("res_nc_p_1680F15");
          TGraph * gr_nc_p_12_curr  = (TGraph*) dir_curr->Get("res_nc_p_1910P31");
          TGraph * gr_nc_p_13_curr  = (TGraph*) dir_curr->Get("res_nc_p_1920P33");
          TGraph * gr_nc_p_14_curr  = (TGraph*) dir_curr->Get("res_nc_p_1905F35");
          TGraph * gr_nc_p_15_curr  = (TGraph*) dir_curr->Get("res_nc_p_1950F37");
          TGraph * gr_nc_p_16_curr  = (TGraph*) dir_curr->Get("res_nc_p_1710P11");
          TGraph * gr_nc_p_tot_ref0 = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_p")         : 0;
          TGraph * gr_nc_p_1_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_p_1232P33") : 0;
          TGraph * gr_nc_p_2_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_p_1535S11") : 0;
          TGraph * gr_nc_p_3_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_p_1520D13") : 0;
          TGraph * gr_nc_p_4_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_p_1650S11") : 0;
          TGraph * gr_nc_p_5_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_p_1700D13") : 0;
          TGraph * gr_nc_p_6_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_p_1675D15") : 0;
          TGraph * gr_nc_p_7_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_p_1620S31") : 0; 
          TGraph * gr_nc_p_8_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_p_1700D33") : 0; 
          TGraph * gr_nc_p_9_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_p_1440P11") : 0;
          TGraph * gr_nc_p_10_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_p_1720P13") : 0;
          TGraph * gr_nc_p_11_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_p_1680F15") : 0;
          TGraph * gr_nc_p_12_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_p_1910P31") : 0;
          TGraph * gr_nc_p_13_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_p_1920P33") : 0;
          TGraph * gr_nc_p_14_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_p_1905F35") : 0; 
          TGraph * gr_nc_p_15_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_p_1950F37") : 0;
          TGraph * gr_nc_p_16_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_p_1710P11") : 0;
          utils::style::Format (gr_nc_p_1_curr,  2, 1, -1, -1, -1, -1);  
          utils::style::Format (gr_nc_p_2_curr,  3, 1, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_p_3_curr,  4, 1, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_p_4_curr,  5, 1, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_p_5_curr,  6, 1, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_p_6_curr,  7, 1, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_p_7_curr,  8, 1, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_p_8_curr,  9, 1, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_p_9_curr,  2, 2, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_p_10_curr, 3, 2, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_p_11_curr, 4, 2, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_p_12_curr, 5, 2, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_p_13_curr, 6, 2, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_p_14_curr, 7, 2, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_p_15_curr, 8, 2, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_p_16_curr, 9, 2, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_p_1_ref0,  -1, 1, -1, 2, 23, 1.3); 
          utils::style::Format (gr_nc_p_2_ref0,  -1, 1, -1, 3, 23, 1.3); 
          utils::style::Format (gr_nc_p_3_ref0,  -1, 1, -1, 4, 23, 1.3); 
          utils::style::Format (gr_nc_p_4_ref0,  -1, 1, -1, 5, 23, 1.3); 
          utils::style::Format (gr_nc_p_5_ref0,  -1, 1, -1, 6, 23, 1.3); 
          utils::style::Format (gr_nc_p_6_ref0,  -1, 1, -1, 7, 23, 1.3); 
          utils::style::Format (gr_nc_p_7_ref0,  -1, 1, -1, 8, 23, 1.3); 
          utils::style::Format (gr_nc_p_8_ref0,  -1, 1, -1, 9, 23, 1.3); 
          utils::style::Format (gr_nc_p_9_ref0,  -1, 2, -1, 2, 22, 1.3); 
          utils::style::Format (gr_nc_p_10_ref0, -1, 2, -1, 3, 22, 1.3); 
          utils::style::Format (gr_nc_p_11_ref0, -1, 2, -1, 4, 22, 1.3); 
          utils::style::Format (gr_nc_p_12_ref0, -1, 2, -1, 5, 22, 1.3); 
          utils::style::Format (gr_nc_p_13_ref0, -1, 2, -1, 6, 22, 1.3); 
          utils::style::Format (gr_nc_p_14_ref0, -1, 2, -1, 7, 22, 1.3); 
          utils::style::Format (gr_nc_p_15_ref0, -1, 2, -1, 8, 22, 1.3); 
          utils::style::Format (gr_nc_p_16_ref0, -1, 2, -1, 9, 22, 1.3); 
          DrawFrame (gr_nc_p_tot_curr, gr_nc_p_tot_ref0, c);
          Draw (gr_nc_p_tot_curr, "L");
          Draw (gr_nc_p_1_curr,   "L"); 
          Draw (gr_nc_p_2_curr,   "L"); 
          Draw (gr_nc_p_3_curr,   "L"); 
          Draw (gr_nc_p_4_curr,   "L"); 
          Draw (gr_nc_p_5_curr,   "L"); 
          Draw (gr_nc_p_6_curr,   "L"); 
          Draw (gr_nc_p_7_curr,   "L"); 
          Draw (gr_nc_p_8_curr,   "L"); 
          Draw (gr_nc_p_9_curr,   "L"); 
          Draw (gr_nc_p_10_curr,  "L"); 
          Draw (gr_nc_p_11_curr,  "L"); 
          Draw (gr_nc_p_12_curr,  "L"); 
          Draw (gr_nc_p_13_curr,  "L"); 
          Draw (gr_nc_p_14_curr,  "L"); 
          Draw (gr_nc_p_15_curr,  "L"); 
          Draw (gr_nc_p_16_curr,  "L"); 
          Draw (gr_nc_p_tot_ref0, "P");
          Draw (gr_nc_p_1_ref0,   "P"); 
          Draw (gr_nc_p_2_ref0,   "P"); 
          Draw (gr_nc_p_3_ref0,   "P"); 
          Draw (gr_nc_p_4_ref0,   "P"); 
          Draw (gr_nc_p_5_ref0,   "P"); 
          Draw (gr_nc_p_6_ref0,   "P"); 
          Draw (gr_nc_p_7_ref0,   "P"); 
          Draw (gr_nc_p_8_ref0,   "P"); 
          Draw (gr_nc_p_9_ref0,   "P"); 
          Draw (gr_nc_p_10_ref0,  "P"); 
          Draw (gr_nc_p_11_ref0,  "P"); 
          Draw (gr_nc_p_12_ref0,  "P"); 
          Draw (gr_nc_p_13_ref0,  "P"); 
          Draw (gr_nc_p_14_ref0,  "P"); 
          Draw (gr_nc_p_15_ref0,  "P"); 
          Draw (gr_nc_p_16_ref0,  "P"); 
          l->Clear();
          l->AddEntry(gr_nc_p_tot_curr, "total",     "L");
          l->AddEntry(gr_nc_p_1_curr,   "(1232)P33", "L");
          l->AddEntry(gr_nc_p_2_curr,   "(1535)S11", "L");
          l->AddEntry(gr_nc_p_3_curr,   "(1520)D13", "L");
          l->AddEntry(gr_nc_p_4_curr,   "(1650)S11", "L");
          l->AddEntry(gr_nc_p_5_curr,   "(1700)D13", "L");
          l->AddEntry(gr_nc_p_6_curr,   "(1675)D15", "L");
          l->AddEntry(gr_nc_p_7_curr,   "(1620)S31", "L");
          l->AddEntry(gr_nc_p_8_curr,   "(1700)D33", "L");
          l->AddEntry(gr_nc_p_9_curr,   "(1440)P11", "L");
          l->AddEntry(gr_nc_p_10_curr,  "(1720)P13", "L");
          l->AddEntry(gr_nc_p_11_curr,  "(1680)F15", "L");
          l->AddEntry(gr_nc_p_12_curr,  "(1910)P31", "L");
          l->AddEntry(gr_nc_p_13_curr,  "(1920)P33", "L");
          l->AddEntry(gr_nc_p_14_curr,  "(1905)F35", "L");
          l->AddEntry(gr_nc_p_15_curr,  "(1950)F37", "L");
          l->AddEntry(gr_nc_p_16_curr,  "(1710)P11", "L");
          l->Draw();
          ls->Clear();
          ls->SetHeader(Form("RES-NC / %s+p%s",probestr,targetstr));
          ls->Draw();
	  c->Update();
     } 
     // RES NC v+n(A)
     {
	  TGraph * gr_nc_n_tot_curr = (TGraph*) dir_curr->Get("res_nc_n");
          TGraph * gr_nc_n_1_curr   = (TGraph*) dir_curr->Get("res_nc_n_1232P33");
          TGraph * gr_nc_n_2_curr   = (TGraph*) dir_curr->Get("res_nc_n_1535S11");
          TGraph * gr_nc_n_3_curr   = (TGraph*) dir_curr->Get("res_nc_n_1520D13");
          TGraph * gr_nc_n_4_curr   = (TGraph*) dir_curr->Get("res_nc_n_1650S11");
          TGraph * gr_nc_n_5_curr   = (TGraph*) dir_curr->Get("res_nc_n_1700D13");
          TGraph * gr_nc_n_6_curr   = (TGraph*) dir_curr->Get("res_nc_n_1675D15");
          TGraph * gr_nc_n_7_curr   = (TGraph*) dir_curr->Get("res_nc_n_1620S31");
          TGraph * gr_nc_n_8_curr   = (TGraph*) dir_curr->Get("res_nc_n_1700D33");
          TGraph * gr_nc_n_9_curr   = (TGraph*) dir_curr->Get("res_nc_n_1440P11");
          TGraph * gr_nc_n_10_curr  = (TGraph*) dir_curr->Get("res_nc_n_1720P13");
          TGraph * gr_nc_n_11_curr  = (TGraph*) dir_curr->Get("res_nc_n_1680F15");
          TGraph * gr_nc_n_12_curr  = (TGraph*) dir_curr->Get("res_nc_n_1910P31");
          TGraph * gr_nc_n_13_curr  = (TGraph*) dir_curr->Get("res_nc_n_1920P33");
          TGraph * gr_nc_n_14_curr  = (TGraph*) dir_curr->Get("res_nc_n_1905F35");
          TGraph * gr_nc_n_15_curr  = (TGraph*) dir_curr->Get("res_nc_n_1950F37");
          TGraph * gr_nc_n_16_curr  = (TGraph*) dir_curr->Get("res_nc_n_1710P11");
	  TGraph * gr_nc_n_tot_ref0 = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_n")         : 0;
          TGraph * gr_nc_n_1_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_n_1232P33") : 0;
          TGraph * gr_nc_n_2_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_n_1535S11") : 0;
          TGraph * gr_nc_n_3_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_n_1520D13") : 0;
          TGraph * gr_nc_n_4_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_n_1650S11") : 0;
          TGraph * gr_nc_n_5_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_n_1700D13") : 0;
          TGraph * gr_nc_n_6_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_n_1675D15") : 0;
          TGraph * gr_nc_n_7_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_n_1620S31") : 0;
          TGraph * gr_nc_n_8_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_n_1700D33") : 0;
          TGraph * gr_nc_n_9_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_n_1440P11") : 0;
          TGraph * gr_nc_n_10_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_n_1720P13") : 0;
          TGraph * gr_nc_n_11_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_n_1680F15") : 0;
          TGraph * gr_nc_n_12_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_n_1910P31") : 0;
          TGraph * gr_nc_n_13_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_n_1920P33") : 0;
          TGraph * gr_nc_n_14_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_n_1905F35") : 0;
          TGraph * gr_nc_n_15_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_n_1950F37") : 0;
          TGraph * gr_nc_n_16_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_nc_n_1710P11") : 0;
          utils::style::Format (gr_nc_n_1_curr,  2, 1, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_n_2_curr,  3, 1, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_n_3_curr,  4, 1, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_n_4_curr,  5, 1, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_n_5_curr,  6, 1, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_n_6_curr,  7, 1, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_n_7_curr,  8, 1, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_n_8_curr,  9, 1, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_n_9_curr,  2, 2, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_n_10_curr, 3, 2, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_n_11_curr, 4, 2, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_n_12_curr, 5, 2, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_n_13_curr, 6, 2, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_n_14_curr, 7, 2, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_n_15_curr, 8, 2, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_n_16_curr, 9, 2, -1, -1, -1, -1); 
          utils::style::Format (gr_nc_n_1_ref0,  -1, 1, -1, 2, 23, 1.3); 
          utils::style::Format (gr_nc_n_2_ref0,  -1, 1, -1, 3, 23, 1.3); 
          utils::style::Format (gr_nc_n_3_ref0,  -1, 1, -1, 4, 23, 1.3); 
          utils::style::Format (gr_nc_n_4_ref0,  -1, 1, -1, 5, 23, 1.3); 
          utils::style::Format (gr_nc_n_5_ref0,  -1, 1, -1, 6, 23, 1.3); 
          utils::style::Format (gr_nc_n_6_ref0,  -1, 1, -1, 7, 23, 1.3); 
          utils::style::Format (gr_nc_n_7_ref0,  -1, 1, -1, 8, 23, 1.3); 
          utils::style::Format (gr_nc_n_8_ref0,  -1, 1, -1, 9, 23, 1.3); 
          utils::style::Format (gr_nc_n_9_ref0,  -1, 2, -1, 2, 22, 1.3); 
          utils::style::Format (gr_nc_n_10_ref0, -1, 2, -1, 3, 22, 1.3); 
          utils::style::Format (gr_nc_n_11_ref0, -1, 2, -1, 4, 22, 1.3); 
          utils::style::Format (gr_nc_n_12_ref0, -1, 2, -1, 5, 22, 1.3); 
          utils::style::Format (gr_nc_n_13_ref0, -1, 2, -1, 6, 22, 1.3); 
          utils::style::Format (gr_nc_n_14_ref0, -1, 2, -1, 7, 22, 1.3); 
          utils::style::Format (gr_nc_n_15_ref0, -1, 2, -1, 8, 22, 1.3); 
          utils::style::Format (gr_nc_n_16_ref0, -1, 2, -1, 9, 22, 1.3); 
          DrawFrame (gr_nc_n_tot_curr, gr_nc_n_tot_ref0, c);
          Draw (gr_nc_n_tot_curr, "L");
          Draw (gr_nc_n_1_curr,   "L"); 
          Draw (gr_nc_n_2_curr,   "L"); 
          Draw (gr_nc_n_3_curr,   "L"); 
          Draw (gr_nc_n_4_curr,   "L"); 
          Draw (gr_nc_n_5_curr,   "L"); 
          Draw (gr_nc_n_6_curr,   "L"); 
          Draw (gr_nc_n_7_curr,   "L"); 
          Draw (gr_nc_n_8_curr,   "L"); 
          Draw (gr_nc_n_9_curr,   "L"); 
          Draw (gr_nc_n_10_curr,  "L"); 
          Draw (gr_nc_n_11_curr,  "L"); 
          Draw (gr_nc_n_12_curr,  "L"); 
          Draw (gr_nc_n_13_curr,  "L"); 
          Draw (gr_nc_n_14_curr,  "L"); 
          Draw (gr_nc_n_15_curr,  "L"); 
          Draw (gr_nc_n_16_curr,  "L"); 
          Draw (gr_nc_n_tot_ref0, "P");
          Draw (gr_nc_n_1_ref0,   "P"); 
          Draw (gr_nc_n_2_ref0,   "P"); 
          Draw (gr_nc_n_3_ref0,   "P"); 
          Draw (gr_nc_n_4_ref0,   "P"); 
          Draw (gr_nc_n_5_ref0,   "P"); 
          Draw (gr_nc_n_6_ref0,   "P"); 
          Draw (gr_nc_n_7_ref0,   "P"); 
          Draw (gr_nc_n_8_ref0,   "P"); 
          Draw (gr_nc_n_9_ref0,   "P"); 
          Draw (gr_nc_n_10_ref0,  "P"); 
          Draw (gr_nc_n_11_ref0,  "P"); 
          Draw (gr_nc_n_12_ref0,  "P"); 
          Draw (gr_nc_n_13_ref0,  "P"); 
          Draw (gr_nc_n_14_ref0,  "P"); 
          Draw (gr_nc_n_15_ref0,  "P"); 
          Draw (gr_nc_n_16_ref0,  "P"); 
          l->Clear();
          l->AddEntry(gr_nc_n_tot_curr, "total",     "L");
          l->AddEntry(gr_nc_n_1_curr,   "(1232)P33", "L");
          l->AddEntry(gr_nc_n_2_curr,   "(1535)S11", "L");
          l->AddEntry(gr_nc_n_3_curr,   "(1520)D13", "L");
          l->AddEntry(gr_nc_n_4_curr,   "(1650)S11", "L");
          l->AddEntry(gr_nc_n_5_curr,   "(1700)D13", "L");
          l->AddEntry(gr_nc_n_6_curr,   "(1675)D15", "L");
          l->AddEntry(gr_nc_n_7_curr,   "(1620)S31", "L");
          l->AddEntry(gr_nc_n_8_curr,   "(1700)D33", "L");
          l->AddEntry(gr_nc_n_9_curr,   "(1440)P11", "L");
          l->AddEntry(gr_nc_n_10_curr,  "(1720)P13", "L");
          l->AddEntry(gr_nc_n_11_curr,  "(1680)F15", "L");
          l->AddEntry(gr_nc_n_12_curr,  "(1910)P31", "L");
          l->AddEntry(gr_nc_n_13_curr,  "(1920)P33", "L");
          l->AddEntry(gr_nc_n_14_curr,  "(1905)F35", "L");
          l->AddEntry(gr_nc_n_15_curr,  "(1950)F37", "L");
          l->AddEntry(gr_nc_n_16_curr,  "(1710)P11", "L");
          l->Draw();
          ls->Clear();
          ls->SetHeader(Form("RES-NC / %s+n%s",probestr,targetstr));
          ls->Draw();
	  c->Update();
     }
     // DIS CC v+p(A)
     {
	  TGraph * grdis_cc_p_curr        = (TGraph*) dir_curr->Get("dis_cc_p");
	  TGraph * grdis_cc_p_charm_curr  = (TGraph*) dir_curr->Get("dis_cc_p_charm");
          TGraph * grdis_cc_p_1_curr      = (TGraph*) dir_curr->Get("dis_cc_p_ubarsea");
          TGraph * grdis_cc_p_2_curr      = (TGraph*) dir_curr->Get("dis_cc_p_dval");
          TGraph * grdis_cc_p_3_curr      = (TGraph*) dir_curr->Get("dis_cc_p_dsea");
          TGraph * grdis_cc_p_4_curr      = (TGraph*) dir_curr->Get("dis_cc_p_ssea");
	  TGraph * grdis_cc_p_ref0        = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_cc_p")         : 0;
	  TGraph * grdis_cc_p_charm_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_cc_p_charm")   : 0;
          TGraph * grdis_cc_p_1_ref0      = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_cc_p_ubarsea") : 0;
          TGraph * grdis_cc_p_2_ref0      = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_cc_p_dval")    : 0;
          TGraph * grdis_cc_p_3_ref0      = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_cc_p_dsea")    : 0;
          TGraph * grdis_cc_p_4_ref0      = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_cc_p_ssea")    : 0;
          utils::style::Format (grdis_cc_p_charm_curr, 1, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_cc_p_1_curr,     2, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_cc_p_2_curr,     3, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_cc_p_3_curr,     4, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_cc_p_4_curr,     5, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_cc_p_charm_ref0, 1, -1, -1,  1, 23, 1.3);
          utils::style::Format (grdis_cc_p_1_ref0,     2, -1, -1,  2, 23, 1.3);
          utils::style::Format (grdis_cc_p_2_ref0,     3, -1, -1,  3, 23, 1.3);
          utils::style::Format (grdis_cc_p_3_ref0,     4, -1, -1,  4, 23, 1.3);
          utils::style::Format (grdis_cc_p_4_ref0,     5, -1, -1,  5, 23, 1.3);
          DrawFrame (grdis_cc_p_curr, grdis_cc_p_ref0, c);
          Draw (grdis_cc_p_curr,       "L");
          Draw (grdis_cc_p_charm_curr, "L");
          Draw (grdis_cc_p_1_curr,     "L");
          Draw (grdis_cc_p_2_curr,     "L");
          Draw (grdis_cc_p_3_curr,     "L");
          Draw (grdis_cc_p_4_curr,     "L");
          Draw (grdis_cc_p_ref0,       "P");
          Draw (grdis_cc_p_charm_ref0, "P");
          Draw (grdis_cc_p_1_ref0,     "P");
          Draw (grdis_cc_p_2_ref0,     "P");
          Draw (grdis_cc_p_3_ref0,     "P");
          Draw (grdis_cc_p_4_ref0,     "P");
          l->Clear();
          l->AddEntry(grdis_cc_p_curr,       "tot (-charm)", "L");
          l->AddEntry(grdis_cc_p_1_curr,     "ubar(sea)", "L");
          l->AddEntry(grdis_cc_p_2_curr,     "d(val)",    "L");
          l->AddEntry(grdis_cc_p_3_curr,     "d(sea)",    "L");
          l->AddEntry(grdis_cc_p_4_curr,     "s(sea)",    "L");
          l->AddEntry(grdis_cc_p_charm_curr, "tot charm", "L");
          l->Draw();
          ls->Clear();
          ls->SetHeader(Form("DIS-CC / %s+p%s",probestr,targetstr));
          ls->Draw();
	  c->Update();
     }
     // DIS CC v+n(A)
     {
	  TGraph * grdis_cc_n_curr       = (TGraph*) dir_curr->Get("dis_cc_n");
	  TGraph * grdis_cc_n_charm_curr = (TGraph*) dir_curr->Get("dis_cc_n_charm");
          TGraph * grdis_cc_n_1_curr     = (TGraph*) dir_curr->Get("dis_cc_n_ubarsea");
          TGraph * grdis_cc_n_2_curr     = (TGraph*) dir_curr->Get("dis_cc_n_dval");
          TGraph * grdis_cc_n_3_curr     = (TGraph*) dir_curr->Get("dis_cc_n_dsea");
          TGraph * grdis_cc_n_4_curr     = (TGraph*) dir_curr->Get("dis_cc_n_ssea");
	  TGraph * grdis_cc_n_ref0       = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_cc_n")         : 0;
	  TGraph * grdis_cc_n_charm_ref0 = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_cc_n_charm")   : 0;
          TGraph * grdis_cc_n_1_ref0     = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_cc_n_ubarsea") : 0;
          TGraph * grdis_cc_n_2_ref0     = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_cc_n_dval")    : 0;
          TGraph * grdis_cc_n_3_ref0     = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_cc_n_dsea")    : 0;
          TGraph * grdis_cc_n_4_ref0     = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_cc_n_ssea")    : 0;
          utils::style::Format (grdis_cc_n_charm_curr, 1, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_cc_n_1_curr,     2, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_cc_n_2_curr,     3, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_cc_n_3_curr,     4, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_cc_n_4_curr,     5, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_cc_n_charm_ref0, 1, -1, -1,  1, 23, 1.3);
          utils::style::Format (grdis_cc_n_1_ref0,     2, -1, -1,  2, 23, 1.3);
          utils::style::Format (grdis_cc_n_2_ref0,     3, -1, -1,  3, 23, 1.3);
          utils::style::Format (grdis_cc_n_3_ref0,     4, -1, -1,  4, 23, 1.3);
          utils::style::Format (grdis_cc_n_4_ref0,     5, -1, -1,  5, 23, 1.3);
          DrawFrame (grdis_cc_n_curr, grdis_cc_n_ref0, c);
          Draw (grdis_cc_n_curr,       "L");
          Draw (grdis_cc_n_charm_curr, "L");
          Draw (grdis_cc_n_1_curr,     "L");
          Draw (grdis_cc_n_2_curr,     "L");
          Draw (grdis_cc_n_3_curr,     "L");
          Draw (grdis_cc_n_4_curr,     "L");
          Draw (grdis_cc_n_ref0,       "P");
          Draw (grdis_cc_n_charm_ref0, "P");
          Draw (grdis_cc_n_1_ref0,     "P");
          Draw (grdis_cc_n_2_ref0,     "P");
          Draw (grdis_cc_n_3_ref0,     "P");
          Draw (grdis_cc_n_4_ref0,     "P");
          l->Clear();
          l->AddEntry(grdis_cc_n_curr,       "tot (-charm)", "L");
          l->AddEntry(grdis_cc_n_1_curr,     "ubar(sea)",    "L");
          l->AddEntry(grdis_cc_n_2_curr,     "d(val)",       "L");
          l->AddEntry(grdis_cc_n_3_curr,     "d(sea)",       "L");
          l->AddEntry(grdis_cc_n_4_curr,     "s(sea)",       "L");
          l->AddEntry(grdis_cc_n_charm_curr, "tot charm",    "L");
          l->Draw();
          ls->Clear();
          ls->SetHeader(Form("DIS-CC / %s+n%s",probestr,targetstr));
          ls->Draw();
	  c->Update();
     }
     // DIS NC v+p(A)
     {
	  TGraph * grdis_nc_p_curr       = (TGraph*) dir_curr->Get("dis_nc_p");
	  TGraph * grdis_nc_p_charm_curr = (TGraph*) dir_curr->Get("dis_nc_p_charm");
          TGraph * grdis_nc_p_1_curr     = (TGraph*) dir_curr->Get("dis_nc_p_sbarsea");
          TGraph * grdis_nc_p_2_curr     = (TGraph*) dir_curr->Get("dis_nc_p_ubarsea");
          TGraph * grdis_nc_p_3_curr     = (TGraph*) dir_curr->Get("dis_nc_p_dbarsea");
          TGraph * grdis_nc_p_4_curr     = (TGraph*) dir_curr->Get("dis_nc_p_dval");
          TGraph * grdis_nc_p_5_curr     = (TGraph*) dir_curr->Get("dis_nc_p_dsea");
          TGraph * grdis_nc_p_6_curr     = (TGraph*) dir_curr->Get("dis_nc_p_uval");
          TGraph * grdis_nc_p_7_curr     = (TGraph*) dir_curr->Get("dis_nc_p_usea");
          TGraph * grdis_nc_p_8_curr     = (TGraph*) dir_curr->Get("dis_nc_p_ssea");
	  TGraph * grdis_nc_p_ref0       = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_nc_p")         : 0;
	  TGraph * grdis_nc_p_charm_ref0 = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_nc_p_charm")   : 0;
          TGraph * grdis_nc_p_1_ref0     = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_nc_p_sbarsea") : 0;
          TGraph * grdis_nc_p_2_ref0     = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_nc_p_ubarsea") : 0;
          TGraph * grdis_nc_p_3_ref0     = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_nc_p_dbarsea") : 0;
          TGraph * grdis_nc_p_4_ref0     = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_nc_p_dval")    : 0;
          TGraph * grdis_nc_p_5_ref0     = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_nc_p_dsea")    : 0;
          TGraph * grdis_nc_p_6_ref0     = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_nc_p_uval")    : 0;
          TGraph * grdis_nc_p_7_ref0     = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_nc_p_usea")    : 0;
          TGraph * grdis_nc_p_8_ref0     = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_nc_p_ssea")    : 0;
          utils::style::Format (grdis_nc_p_charm_curr, 1, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_nc_p_1_curr,     2, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_nc_p_2_curr,     3, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_nc_p_3_curr,     4, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_nc_p_4_curr,     5, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_nc_p_5_curr,     6, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_nc_p_6_curr,     8, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_nc_p_7_curr,     8, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_nc_p_8_curr,     9, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_nc_p_charm_ref0, 1, -1, -1,  1, 23, 1.3);
          utils::style::Format (grdis_nc_p_1_ref0,     2, -1, -1,  2, 23, 1.3);
          utils::style::Format (grdis_nc_p_2_ref0,     3, -1, -1,  3, 23, 1.3);
          utils::style::Format (grdis_nc_p_3_ref0,     4, -1, -1,  4, 23, 1.3);
          utils::style::Format (grdis_nc_p_4_ref0,     5, -1, -1,  5, 23, 1.3);
          utils::style::Format (grdis_nc_p_5_ref0,     6, -1, -1,  6, 23, 1.3);
          utils::style::Format (grdis_nc_p_6_ref0,     7, -1, -1,  7, 23, 1.3);
          utils::style::Format (grdis_nc_p_7_ref0,     8, -1, -1,  8, 23, 1.3);
          utils::style::Format (grdis_nc_p_8_ref0,     9, -1, -1,  9, 23, 1.3);
          DrawFrame (grdis_nc_p_curr, grdis_nc_p_ref0, c);
          Draw (grdis_nc_p_curr,       "L");
          Draw (grdis_nc_p_charm_curr, "L");
          Draw (grdis_nc_p_1_curr,     "L");
          Draw (grdis_nc_p_2_curr,     "L");
          Draw (grdis_nc_p_3_curr,     "L");
          Draw (grdis_nc_p_4_curr,     "L");
          Draw (grdis_nc_p_5_curr,     "L");
          Draw (grdis_nc_p_6_curr,     "L");
          Draw (grdis_nc_p_7_curr,     "L");
          Draw (grdis_nc_p_8_curr,     "L");
          Draw (grdis_nc_p_ref0,       "P");
          Draw (grdis_nc_p_charm_ref0, "P");
          Draw (grdis_nc_p_1_ref0,     "P");
          Draw (grdis_nc_p_2_ref0,     "P");
          Draw (grdis_nc_p_3_ref0,     "P");
          Draw (grdis_nc_p_4_ref0,     "P");
          Draw (grdis_nc_p_5_ref0,     "P");
          Draw (grdis_nc_p_6_ref0,     "P");
          Draw (grdis_nc_p_7_ref0,     "P");
          Draw (grdis_nc_p_8_ref0,     "P");
          l->Clear();
          l->AddEntry(grdis_nc_p_curr,   "total",     "L");
          l->AddEntry(grdis_nc_p_1_curr, "sbar(sea)", "L");
          l->AddEntry(grdis_nc_p_2_curr, "ubar(sea)", "L");
          l->AddEntry(grdis_nc_p_3_curr, "dbar(sea)", "L");
          l->AddEntry(grdis_nc_p_4_curr, "d(val)",    "L");
          l->AddEntry(grdis_nc_p_5_curr, "d(sea)",    "L");
          l->AddEntry(grdis_nc_p_6_curr, "u(val)",    "L");
          l->AddEntry(grdis_nc_p_7_curr, "u(sea)",    "L");
          l->AddEntry(grdis_nc_p_8_curr, "s(sea)",    "L");
          l->Draw();
          ls->Clear();
          ls->SetHeader(Form("DIS-NC / %s+p%s",probestr,targetstr));
          ls->Draw();
	  c->Update();
     }
     // DIS NC v+n(A)
     {
	  TGraph * grdis_nc_n_curr       = (TGraph*) dir_curr->Get("dis_nc_n");
	  TGraph * grdis_nc_n_charm_curr = (TGraph*) dir_curr->Get("dis_nc_n_charm");
          TGraph * grdis_nc_n_1_curr     = (TGraph*) dir_curr->Get("dis_nc_n_sbarsea");
          TGraph * grdis_nc_n_2_curr     = (TGraph*) dir_curr->Get("dis_nc_n_ubarsea");
          TGraph * grdis_nc_n_3_curr     = (TGraph*) dir_curr->Get("dis_nc_n_dbarsea");
          TGraph * grdis_nc_n_4_curr     = (TGraph*) dir_curr->Get("dis_nc_n_dval");
          TGraph * grdis_nc_n_5_curr     = (TGraph*) dir_curr->Get("dis_nc_n_dsea");
          TGraph * grdis_nc_n_6_curr     = (TGraph*) dir_curr->Get("dis_nc_n_uval");
          TGraph * grdis_nc_n_7_curr     = (TGraph*) dir_curr->Get("dis_nc_n_usea");
          TGraph * grdis_nc_n_8_curr     = (TGraph*) dir_curr->Get("dis_nc_n_ssea");
	  TGraph * grdis_nc_n_ref0       = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_nc_n")         : 0;
	  TGraph * grdis_nc_n_charm_ref0 = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_nc_n_charm")   : 0;
          TGraph * grdis_nc_n_1_ref0     = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_nc_n_sbarsea") : 0;
          TGraph * grdis_nc_n_2_ref0     = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_nc_n_ubarsea") : 0;
          TGraph * grdis_nc_n_3_ref0     = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_nc_n_dbarsea") : 0;
          TGraph * grdis_nc_n_4_ref0     = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_nc_n_dval")    : 0;
          TGraph * grdis_nc_n_5_ref0     = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_nc_n_dsea")    : 0;
          TGraph * grdis_nc_n_6_ref0     = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_nc_n_uval")    : 0;
          TGraph * grdis_nc_n_7_ref0     = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_nc_n_usea")    : 0;
          TGraph * grdis_nc_n_8_ref0     = (dir_ref0) ? (TGraph*) dir_ref0->Get("dis_nc_n_ssea")    : 0;
          utils::style::Format (grdis_nc_n_charm_curr, 1, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_nc_n_1_curr,     2, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_nc_n_2_curr,     3, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_nc_n_3_curr,     4, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_nc_n_4_curr,     5, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_nc_n_5_curr,     6, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_nc_n_6_curr,     8, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_nc_n_7_curr,     8, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_nc_n_8_curr,     9, -1, -1, -1, -1, -1); 
          utils::style::Format (grdis_nc_n_charm_ref0, 1, -1, -1,  1, 23, 1.3);
          utils::style::Format (grdis_nc_n_1_ref0,     2, -1, -1,  2, 23, 1.3);
          utils::style::Format (grdis_nc_n_2_ref0,     3, -1, -1,  3, 23, 1.3);
          utils::style::Format (grdis_nc_n_3_ref0,     4, -1, -1,  4, 23, 1.3);
          utils::style::Format (grdis_nc_n_4_ref0,     5, -1, -1,  5, 23, 1.3);
          utils::style::Format (grdis_nc_n_5_ref0,     6, -1, -1,  6, 23, 1.3);
          utils::style::Format (grdis_nc_n_6_ref0,     7, -1, -1,  7, 23, 1.3);
          utils::style::Format (grdis_nc_n_7_ref0,     8, -1, -1,  8, 23, 1.3);
          utils::style::Format (grdis_nc_n_8_ref0,     9, -1, -1,  9, 23, 1.3);
          DrawFrame (grdis_nc_n_curr, grdis_nc_n_ref0, c);
          Draw (grdis_nc_n_curr,       "L");
          Draw (grdis_nc_n_charm_curr, "L");
          Draw (grdis_nc_n_1_curr,     "L");
          Draw (grdis_nc_n_2_curr,     "L");
          Draw (grdis_nc_n_3_curr,     "L");
          Draw (grdis_nc_n_4_curr,     "L");
          Draw (grdis_nc_n_5_curr,     "L");
          Draw (grdis_nc_n_6_curr,     "L");
          Draw (grdis_nc_n_7_curr,     "L");
          Draw (grdis_nc_n_8_curr,     "L");
          Draw (grdis_nc_n_ref0,       "P");
          Draw (grdis_nc_n_charm_ref0, "P");
          Draw (grdis_nc_n_1_ref0,     "P");
          Draw (grdis_nc_n_2_ref0,     "P");
          Draw (grdis_nc_n_3_ref0,     "P");
          Draw (grdis_nc_n_4_ref0,     "P");
          Draw (grdis_nc_n_5_ref0,     "P");
          Draw (grdis_nc_n_6_ref0,     "P");
          Draw (grdis_nc_n_7_ref0,     "P");
          Draw (grdis_nc_n_8_ref0,     "P");
          l->Clear();
          l->AddEntry(grdis_nc_n_curr,   "total",     "L");
          l->AddEntry(grdis_nc_n_1_curr, "sbar(sea)", "L");
          l->AddEntry(grdis_nc_n_2_curr, "ubar(sea)", "L");
          l->AddEntry(grdis_nc_n_3_curr, "dbar(sea)", "L");
          l->AddEntry(grdis_nc_n_4_curr, "d(val)",    "L");
          l->AddEntry(grdis_nc_n_5_curr, "d(sea)",    "L");
          l->AddEntry(grdis_nc_n_6_curr, "u(val)",    "L");
          l->AddEntry(grdis_nc_n_7_curr, "u(sea)",    "L");
          l->AddEntry(grdis_nc_n_8_curr, "s(sea)",    "L");
          l->Draw();
          ls->Clear();
          ls->SetHeader(Form("DIS-NC / %s+n%s",probestr,targetstr));
          ls->Draw();
	  c->Update();
     }
     // COH CC v+A
     {
	  TGraph * gr_coh_curr = (TGraph *) dir_curr->Get("coh_cc");
	  TGraph * gr_coh_ref0 = (dir_ref0) ? (TGraph *) dir_ref0->Get("coh_cc") : 0;
          Draw(gr_coh_curr,"L");
          Draw(gr_coh_ref0,"L");
          DrawFrame (gr_coh_curr, gr_coh_ref0, c);
          ls->Clear();
          ls->SetHeader(Form("COH-CC / %s+%s",probestr,targetstr));
          ls->Draw();
	  c->Update();
     }
     // COH NC v+A
     {
	  TGraph * gr_coh_curr = (TGraph *) dir_curr->Get("coh_nc");
	  TGraph * gr_coh_ref0 = (dir_ref0) ? (TGraph *) dir_ref0->Get("coh_nc") : 0;
          Draw(gr_coh_curr,"L");
          Draw(gr_coh_ref0,"L");
          DrawFrame (gr_coh_curr, gr_coh_ref0, c);
          ls->Clear();
          ls->SetHeader(Form("COH-NC / %s+%s",probestr,targetstr));
          ls->Draw();
	  c->Update();
     }
     // IMD numu+e(A)
     {
	  dir_curr->Get("imd_cc")->Draw("lp");
          ls->Clear();
          ls->SetHeader(Form("IMD / %s+e%s",probestr,targetstr));
          ls->Draw();
	  c->Update();
     }
  }


  if(is_nubar) {

     // QEL CC vbar+p(A)
     {
          TGraph * gr_cc_p_curr = (TGraph*) dir_curr->Get("qel_cc_p");
          TGraph * gr_cc_p_ref0 = (dir_ref0) ? (TGraph*) dir_ref0->Get("qel_cc_p") : 0;
          DrawFrame (gr_cc_p_curr, gr_cc_p_ref0, c);
          Draw (gr_cc_p_curr, "L");
          Draw (gr_cc_p_ref0, "P");
          ls->Clear();
          ls->SetHeader(Form("QEL-CC / %s+n%s",probestr,targetstr));
          ls->Draw();
          c->Update();
     }
     // QEL NC vbar+n(A)
     {
	  TGraph * gr_nc_n_curr = (TGraph*) dir_curr->Get("qel_nc_n");
	  TGraph * gr_nc_n_ref0 = (dir_ref0) ? (TGraph*) dir_ref0->Get("qel_nc_n") : 0;
          DrawFrame (gr_nc_n_curr, gr_nc_n_ref0, c);
          Draw (gr_nc_n_curr, "L");
          Draw (gr_nc_n_ref0, "P");
          ls->Clear();
          ls->SetHeader(Form("QEL-NC / %s+p%s",probestr,targetstr));
          ls->Draw();
	  c->Update();
     }
     // QEL NC numubar+p(Fe56)
     {
	  TGraph * gr_nc_p_curr = (TGraph*) dir_curr->Get("qel_nc_p");
	  TGraph * gr_nc_p_ref0 = (dir_ref0) ? (TGraph*) dir_ref0->Get("qel_nc_p") : 0;
          DrawFrame (gr_nc_p_curr, gr_nc_p_ref0, c);
          Draw (gr_nc_p_curr, "L");
          Draw (gr_nc_p_ref0, "P");
          ls->Clear();
          ls->SetHeader(Form("QEL-NC / %s+p%s",probestr,targetstr));
          ls->Draw();
	  c->Update();
     }
     // RES CC numubar+p(Fe56)
     {
	  TGraph * gr_cc_p_curr    = (TGraph*) dir_curr->Get("res_cc_p");
          TGraph * gr_cc_p_1_curr  = (TGraph*) dir_curr->Get("res_cc_p_1232P33");
          TGraph * gr_cc_p_2_curr  = (TGraph*) dir_curr->Get("res_cc_p_1535S11");
          TGraph * gr_cc_p_3_curr  = (TGraph*) dir_curr->Get("res_cc_p_1520D13");
          TGraph * gr_cc_p_4_curr  = (TGraph*) dir_curr->Get("res_cc_p_1650S11");
          TGraph * gr_cc_p_5_curr  = (TGraph*) dir_curr->Get("res_cc_p_1700D13");
          TGraph * gr_cc_p_6_curr  = (TGraph*) dir_curr->Get("res_cc_p_1675D15");
          TGraph * gr_cc_p_7_curr  = (TGraph*) dir_curr->Get("res_cc_p_1620S31");
          TGraph * gr_cc_p_8_curr  = (TGraph*) dir_curr->Get("res_cc_p_1700D33");
          TGraph * gr_cc_p_9_curr  = (TGraph*) dir_curr->Get("res_cc_p_1440P11");
          TGraph * gr_cc_p_10_curr = (TGraph*) dir_curr->Get("res_cc_p_1720P13");
          TGraph * gr_cc_p_11_curr = (TGraph*) dir_curr->Get("res_cc_p_1680F15");
          TGraph * gr_cc_p_12_curr = (TGraph*) dir_curr->Get("res_cc_p_1910P31");
          TGraph * gr_cc_p_13_curr = (TGraph*) dir_curr->Get("res_cc_p_1920P33");
          TGraph * gr_cc_p_14_curr = (TGraph*) dir_curr->Get("res_cc_p_1905F35");
          TGraph * gr_cc_p_15_curr = (TGraph*) dir_curr->Get("res_cc_p_1950F37");
          TGraph * gr_cc_p_16_curr = (TGraph*) dir_curr->Get("res_cc_p_1710P11");
	  TGraph * gr_cc_p_ref0    = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_p")         : 0;
          TGraph * gr_cc_p_1_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_p_1232P33") : 0;
          TGraph * gr_cc_p_2_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_p_1535S11") : 0;
          TGraph * gr_cc_p_3_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_p_1520D13") : 0;
          TGraph * gr_cc_p_4_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_p_1650S11") : 0;
          TGraph * gr_cc_p_5_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_p_1700D13") : 0;
          TGraph * gr_cc_p_6_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_p_1675D15") : 0;
          TGraph * gr_cc_p_7_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_p_1620S31") : 0;
          TGraph * gr_cc_p_8_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_p_1700D33") : 0;
          TGraph * gr_cc_p_9_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_p_1440P11") : 0;
          TGraph * gr_cc_p_10_ref0 = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_p_1720P13") : 0;
          TGraph * gr_cc_p_11_ref0 = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_p_1680F15") : 0;
          TGraph * gr_cc_p_12_ref0 = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_p_1910P31") : 0;
          TGraph * gr_cc_p_13_ref0 = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_p_1920P33") : 0;
          TGraph * gr_cc_p_14_ref0 = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_p_1905F35") : 0;
          TGraph * gr_cc_p_15_ref0 = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_p_1950F37") : 0;
          TGraph * gr_cc_p_16_ref0 = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_p_1710P11") : 0;
          utils::style::Format (gr_cc_p_curr,     1, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_p_1_curr,   2, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_p_2_curr,   3, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_p_3_curr,   4, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_p_4_curr,   5, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_p_5_curr,   6, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_p_6_curr,   7, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_p_7_curr,   8, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_p_8_curr,   9, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_p_9_curr,  31, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_p_10_curr, 32, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_p_11_curr, 33, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_p_12_curr, 34, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_p_13_curr, 35, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_p_14_curr, 36, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_p_15_curr, 37, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_p_16_curr, 38, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_p_ref0,     1, -1, -1,  1, 23, 1.3);
          utils::style::Format (gr_cc_p_1_ref0,   2, -1, -1,  2, 23, 1.3);
          utils::style::Format (gr_cc_p_2_ref0,   3, -1, -1,  3, 23, 1.3);
          utils::style::Format (gr_cc_p_3_ref0,   4, -1, -1,  4, 23, 1.3);
          utils::style::Format (gr_cc_p_4_ref0,   5, -1, -1,  5, 23, 1.3);
          utils::style::Format (gr_cc_p_5_ref0,   6, -1, -1,  6, 23, 1.3);
          utils::style::Format (gr_cc_p_6_ref0,   7, -1, -1,  7, 23, 1.3);
          utils::style::Format (gr_cc_p_7_ref0,   8, -1, -1,  8, 23, 1.3);
          utils::style::Format (gr_cc_p_8_ref0,   9, -1, -1,  9, 23, 1.3);
          utils::style::Format (gr_cc_p_9_ref0,  31, -1, -1, 31, 23, 1.3);
          utils::style::Format (gr_cc_p_10_ref0, 32, -1, -1, 32, 23, 1.3);
          utils::style::Format (gr_cc_p_11_ref0, 33, -1, -1, 33, 23, 1.3);
          utils::style::Format (gr_cc_p_12_ref0, 34, -1, -1, 34, 23, 1.3);
          utils::style::Format (gr_cc_p_13_ref0, 35, -1, -1, 35, 23, 1.3);
          utils::style::Format (gr_cc_p_14_ref0, 36, -1, -1, 36, 23, 1.3);
          utils::style::Format (gr_cc_p_15_ref0, 37, -1, -1, 37, 23, 1.3);
          utils::style::Format (gr_cc_p_16_ref0, 38, -1, -1, 38, 23, 1.3);
          Draw (gr_cc_p_curr,    "L");
          Draw (gr_cc_p_1_curr,  "L");
          Draw (gr_cc_p_2_curr,  "L");
          Draw (gr_cc_p_3_curr,  "L");
          Draw (gr_cc_p_4_curr,  "L");
          Draw (gr_cc_p_5_curr,  "L");
          Draw (gr_cc_p_6_curr,  "L");
          Draw (gr_cc_p_7_curr,  "L");
          Draw (gr_cc_p_8_curr,  "L");
          Draw (gr_cc_p_9_curr,  "L");
          Draw (gr_cc_p_10_curr, "L");
          Draw (gr_cc_p_11_curr, "L");
          Draw (gr_cc_p_12_curr, "L");
          Draw (gr_cc_p_13_curr, "L");
          Draw (gr_cc_p_14_curr, "L");
          Draw (gr_cc_p_15_curr, "L");
          Draw (gr_cc_p_16_curr, "L");
          Draw (gr_cc_p_ref0,    "P");
          Draw (gr_cc_p_1_ref0,  "P");
          Draw (gr_cc_p_2_ref0,  "P");
          Draw (gr_cc_p_3_ref0,  "P");
          Draw (gr_cc_p_4_ref0,  "P");
          Draw (gr_cc_p_5_ref0,  "P");
          Draw (gr_cc_p_6_ref0,  "P");
          Draw (gr_cc_p_7_ref0,  "P");
          Draw (gr_cc_p_8_ref0,  "P");
          Draw (gr_cc_p_9_ref0,  "P");
          Draw (gr_cc_p_10_ref0, "P");
          Draw (gr_cc_p_11_ref0, "P");
          Draw (gr_cc_p_12_ref0, "P");
          Draw (gr_cc_p_13_ref0, "P");
          Draw (gr_cc_p_14_ref0, "P");
          Draw (gr_cc_p_15_ref0, "P");
          Draw (gr_cc_p_16_ref0, "P");
          l->Clear();
          l->AddEntry(gr_cc_p_curr,    "total",     "L");
          l->AddEntry(gr_cc_p_1_curr,  "(1232)P33", "L");
          l->AddEntry(gr_cc_p_2_curr,  "(1535)S11", "L");
          l->AddEntry(gr_cc_p_3_curr,  "(1520)D13", "L");
          l->AddEntry(gr_cc_p_4_curr,  "(1650)S11", "L");
          l->AddEntry(gr_cc_p_5_curr,  "(1700)D13", "L");
          l->AddEntry(gr_cc_p_6_curr,  "(1675)D15", "L");
          l->AddEntry(gr_cc_p_7_curr,  "(1620)S31", "L");
          l->AddEntry(gr_cc_p_8_curr,  "(1700)D33", "L");
          l->AddEntry(gr_cc_p_9_curr,  "(1440)P11", "L");
          l->AddEntry(gr_cc_p_10_curr, "(1720)P13", "L");
          l->AddEntry(gr_cc_p_11_curr, "(1680)F15", "L");
          l->AddEntry(gr_cc_p_12_curr, "(1910)P31", "L");
          l->AddEntry(gr_cc_p_13_curr, "(1920)P33", "L");
          l->AddEntry(gr_cc_p_14_curr, "(1905)F35", "L");
          l->AddEntry(gr_cc_p_15_curr, "(1950)F37", "L");
          l->AddEntry(gr_cc_p_16_curr, "(1710)P11", "L");
          l->Draw();
          ls->Clear();
          ls->SetHeader(Form("RES-CC / %s+p%s",probestr,targetstr));
          ls->Draw();
	  c->Update();
     }
     // RES CC numubar+n(Fe56)
     {
	  TGraph * gr_cc_n_tot_curr = (TGraph*) dir_curr->Get("res_cc_n");
          TGraph * gr_cc_n_1_curr   = (TGraph*) dir_curr->Get("res_cc_n_1232P33");
          TGraph * gr_cc_n_2_curr   = (TGraph*) dir_curr->Get("res_cc_n_1535S11");
          TGraph * gr_cc_n_3_curr   = (TGraph*) dir_curr->Get("res_cc_n_1520D13");
          TGraph * gr_cc_n_4_curr   = (TGraph*) dir_curr->Get("res_cc_n_1650S11");
          TGraph * gr_cc_n_5_curr   = (TGraph*) dir_curr->Get("res_cc_n_1700D13");
          TGraph * gr_cc_n_6_curr   = (TGraph*) dir_curr->Get("res_cc_n_1675D15");
          TGraph * gr_cc_n_7_curr   = (TGraph*) dir_curr->Get("res_cc_n_1620S31");
          TGraph * gr_cc_n_8_curr   = (TGraph*) dir_curr->Get("res_cc_n_1700D33");
          TGraph * gr_cc_n_9_curr   = (TGraph*) dir_curr->Get("res_cc_n_1440P11");
          TGraph * gr_cc_n_10_curr  = (TGraph*) dir_curr->Get("res_cc_n_1720P13");
          TGraph * gr_cc_n_11_curr  = (TGraph*) dir_curr->Get("res_cc_n_1680F15");
          TGraph * gr_cc_n_12_curr  = (TGraph*) dir_curr->Get("res_cc_n_1910P31");
          TGraph * gr_cc_n_13_curr  = (TGraph*) dir_curr->Get("res_cc_n_1920P33");
          TGraph * gr_cc_n_14_curr  = (TGraph*) dir_curr->Get("res_cc_n_1905F35");
          TGraph * gr_cc_n_15_curr  = (TGraph*) dir_curr->Get("res_cc_n_1950F37");
          TGraph * gr_cc_n_16_curr  = (TGraph*) dir_curr->Get("res_cc_n_1710P11");
	  TGraph * gr_cc_n_tot_ref0 = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n")         : 0;
          TGraph * gr_cc_n_1_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1232P33") : 0;
          TGraph * gr_cc_n_2_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1535S11") : 0;
          TGraph * gr_cc_n_3_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1520D13") : 0;
          TGraph * gr_cc_n_4_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1650S11") : 0;
          TGraph * gr_cc_n_5_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1700D13") : 0;
          TGraph * gr_cc_n_6_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1675D15") : 0;
          TGraph * gr_cc_n_7_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1620S31") : 0;
          TGraph * gr_cc_n_8_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1700D33") : 0;
          TGraph * gr_cc_n_9_ref0   = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1440P11") : 0;
          TGraph * gr_cc_n_10_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1720P13") : 0;
          TGraph * gr_cc_n_11_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1680F15") : 0; 
          TGraph * gr_cc_n_12_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1910P31") : 0;
          TGraph * gr_cc_n_13_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1920P33") : 0;
          TGraph * gr_cc_n_14_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1905F35") : 0;
          TGraph * gr_cc_n_15_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1950F37") : 0;
          TGraph * gr_cc_n_16_ref0  = (dir_ref0) ? (TGraph*) dir_ref0->Get("res_cc_n_1710P11") : 0;
          utils::style::Format (gr_cc_n_tot_curr, 1, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_n_1_curr,   2, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_n_2_curr,   3, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_n_3_curr,   4, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_n_4_curr,   5, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_n_5_curr,   6, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_n_6_curr,   7, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_n_7_curr,   8, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_n_8_curr,   9, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_n_9_curr,  31, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_n_10_curr, 32, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_n_11_curr, 33, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_n_12_curr, 34, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_n_13_curr, 35, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_n_14_curr, 36, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_n_15_curr, 37, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_n_16_curr, 38, -1, -1, -1, -1, -1);
          utils::style::Format (gr_cc_n_tot_ref0, 1, -1, -1,  1, 23, 1.3);
          utils::style::Format (gr_cc_n_1_ref0,   2, -1, -1,  2, 23, 1.3);
          utils::style::Format (gr_cc_n_2_ref0,   3, -1, -1,  3, 23, 1.3);
          utils::style::Format (gr_cc_n_3_ref0,   4, -1, -1,  4, 23, 1.3);
          utils::style::Format (gr_cc_n_4_ref0,   5, -1, -1,  5, 23, 1.3);
          utils::style::Format (gr_cc_n_5_ref0,   6, -1, -1,  6, 23, 1.3);
          utils::style::Format (gr_cc_n_6_ref0,   7, -1, -1,  7, 23, 1.3);
          utils::style::Format (gr_cc_n_7_ref0,   8, -1, -1,  8, 23, 1.3);
          utils::style::Format (gr_cc_n_8_ref0,   9, -1, -1,  9, 23, 1.3);
          utils::style::Format (gr_cc_n_9_ref0,  31, -1, -1, 31, 23, 1.3);
          utils::style::Format (gr_cc_n_10_ref0, 32, -1, -1, 32, 23, 1.3);
          utils::style::Format (gr_cc_n_11_ref0, 33, -1, -1, 33, 23, 1.3);
          utils::style::Format (gr_cc_n_12_ref0, 34, -1, -1, 34, 23, 1.3);
          utils::style::Format (gr_cc_n_13_ref0, 35, -1, -1, 35, 23, 1.3);
          utils::style::Format (gr_cc_n_14_ref0, 36, -1, -1, 36, 23, 1.3);
          utils::style::Format (gr_cc_n_15_ref0, 37, -1, -1, 37, 23, 1.3);
          utils::style::Format (gr_cc_n_16_ref0, 38, -1, -1, 38, 23, 1.3);
          Draw (gr_cc_n_tot_curr,"L");
          Draw (gr_cc_n_1_curr,  "L");
          Draw (gr_cc_n_2_curr,  "L");
          Draw (gr_cc_n_3_curr,  "L");
          Draw (gr_cc_n_4_curr,  "L");
          Draw (gr_cc_n_5_curr,  "L");
          Draw (gr_cc_n_6_curr,  "L");
          Draw (gr_cc_n_7_curr,  "L");
          Draw (gr_cc_n_8_curr,  "L");
          Draw (gr_cc_n_9_curr,  "L");
          Draw (gr_cc_n_10_curr, "L");
          Draw (gr_cc_n_11_curr, "L");
          Draw (gr_cc_n_12_curr, "L");
          Draw (gr_cc_n_13_curr, "L");
          Draw (gr_cc_n_14_curr, "L");
          Draw (gr_cc_n_15_curr, "L");
          Draw (gr_cc_n_16_curr, "L");
          Draw (gr_cc_n_tot_ref0,"P");
          Draw (gr_cc_n_1_ref0,  "P");
          Draw (gr_cc_n_2_ref0,  "P");
          Draw (gr_cc_n_3_ref0,  "P");
          Draw (gr_cc_n_4_ref0,  "P");
          Draw (gr_cc_n_5_ref0,  "P");
          Draw (gr_cc_n_6_ref0,  "P");
          Draw (gr_cc_n_7_ref0,  "P");
          Draw (gr_cc_n_8_ref0,  "P");
          Draw (gr_cc_n_9_ref0,  "P");
          Draw (gr_cc_n_10_ref0, "P");
          Draw (gr_cc_n_11_ref0, "P");
          Draw (gr_cc_n_12_ref0, "P");
          Draw (gr_cc_n_13_ref0, "P");
          Draw (gr_cc_n_14_ref0, "P");
          Draw (gr_cc_n_15_ref0, "P");
          Draw (gr_cc_n_16_ref0, "P");
          l->Clear();
          l->AddEntry(gr_cc_n_tot_curr,"total",     "L");
          l->AddEntry(gr_cc_n_1_curr,  "(1232)P33", "L");
          l->AddEntry(gr_cc_n_2_curr,  "(1535)S11", "L");
          l->AddEntry(gr_cc_n_3_curr,  "(1520)D13", "L");
          l->AddEntry(gr_cc_n_4_curr,  "(1650)S11", "L");
          l->AddEntry(gr_cc_n_5_curr,  "(1700)D13", "L");
          l->AddEntry(gr_cc_n_6_curr,  "(1675)D15", "L");
          l->AddEntry(gr_cc_n_7_curr,  "(1620)S31", "L");
          l->AddEntry(gr_cc_n_8_curr,  "(1700)D33", "L");
          l->AddEntry(gr_cc_n_9_curr,  "(1440)P11", "L");
          l->AddEntry(gr_cc_n_10_curr, "(1720)P13", "L");
          l->AddEntry(gr_cc_n_11_curr, "(1680)F15", "L");
          l->AddEntry(gr_cc_n_12_curr, "(1910)P31", "L");
          l->AddEntry(gr_cc_n_13_curr, "(1920)P33", "L");
          l->AddEntry(gr_cc_n_14_curr, "(1905)F35", "L");
          l->AddEntry(gr_cc_n_15_curr, "(1950)F37", "L");
          l->AddEntry(gr_cc_n_16_curr, "(1710)P11", "L");
          l->Draw();
          ls->Clear();
          ls->SetHeader(Form("QEL-CC / %s+n%s",probestr,targetstr));
          ls->Draw();
	  c->Update();
     }
     // RES NC numubar+p(Fe56)
     {
	  TGraph * gr_nc_p_tot = (TGraph*) dir_curr->Get("res_nc_p");
          TGraph * gr_nc_p_1   = (TGraph*) dir_curr->Get("res_nc_p_1232P33");
          TGraph * gr_nc_p_2   = (TGraph*) dir_curr->Get("res_nc_p_1535S11");
          TGraph * gr_nc_p_3   = (TGraph*) dir_curr->Get("res_nc_p_1520D13");
          TGraph * gr_nc_p_4   = (TGraph*) dir_curr->Get("res_nc_p_1650S11");
          TGraph * gr_nc_p_5   = (TGraph*) dir_curr->Get("res_nc_p_1700D13");
          TGraph * gr_nc_p_6   = (TGraph*) dir_curr->Get("res_nc_p_1675D15");
          TGraph * gr_nc_p_7   = (TGraph*) dir_curr->Get("res_nc_p_1620S31");
          TGraph * gr_nc_p_8   = (TGraph*) dir_curr->Get("res_nc_p_1700D33");
          TGraph * gr_nc_p_9   = (TGraph*) dir_curr->Get("res_nc_p_1440P11");
          TGraph * gr_nc_p_10  = (TGraph*) dir_curr->Get("res_nc_p_1720P13");
          TGraph * gr_nc_p_11  = (TGraph*) dir_curr->Get("res_nc_p_1680F15");
          TGraph * gr_nc_p_12  = (TGraph*) dir_curr->Get("res_nc_p_1910P31");
          TGraph * gr_nc_p_13  = (TGraph*) dir_curr->Get("res_nc_p_1920P33");
          TGraph * gr_nc_p_14  = (TGraph*) dir_curr->Get("res_nc_p_1905F35");
          TGraph * gr_nc_p_15  = (TGraph*) dir_curr->Get("res_nc_p_1950F37");
          TGraph * gr_nc_p_16  = (TGraph*) dir_curr->Get("res_nc_p_1710P11");
          gr_nc_p_1 ->SetLineColor(2);
          gr_nc_p_2 ->SetLineColor(3);
          gr_nc_p_3 ->SetLineColor(4);
          gr_nc_p_4 ->SetLineColor(5);
          gr_nc_p_5 ->SetLineColor(6);
          gr_nc_p_6 ->SetLineColor(7);
          gr_nc_p_7 ->SetLineColor(8);
          gr_nc_p_8 ->SetLineColor(9);
          gr_nc_p_9 ->SetLineColor(31);
          gr_nc_p_10->SetLineColor(32);
          gr_nc_p_11->SetLineColor(33);
          gr_nc_p_12->SetLineColor(34);
          gr_nc_p_13->SetLineColor(35);
          gr_nc_p_14->SetLineColor(36);
          gr_nc_p_15->SetLineColor(37);
          gr_nc_p_16->SetLineColor(38);
          l->Clear();
          l->AddEntry(gr_nc_p_tot,"total",     "L");
          l->AddEntry(gr_nc_p_1,  "(1232)P33", "L");
          l->AddEntry(gr_nc_p_2,  "(1535)S11", "L");
          l->AddEntry(gr_nc_p_3,  "(1520)D13", "L");
          l->AddEntry(gr_nc_p_4,  "(1650)S11", "L");
          l->AddEntry(gr_nc_p_5,  "(1700)D13", "L");
          l->AddEntry(gr_nc_p_6,  "(1675)D15", "L");
          l->AddEntry(gr_nc_p_7,  "(1620)S31", "L");
          l->AddEntry(gr_nc_p_8,  "(1700)D33", "L");
          l->AddEntry(gr_nc_p_9,  "(1440)P11", "L");
          l->AddEntry(gr_nc_p_10, "(1720)P13", "L");
          l->AddEntry(gr_nc_p_11, "(1680)F15", "L");
          l->AddEntry(gr_nc_p_12, "(1910)P31", "L");
          l->AddEntry(gr_nc_p_13, "(1920)P33", "L");
          l->AddEntry(gr_nc_p_14, "(1905)F35", "L");
          l->AddEntry(gr_nc_p_15, "(1950)F37", "L");
          l->AddEntry(gr_nc_p_16, "(1710)P11", "L");
          gr_nc_p_tot ->Draw("L");
          gr_nc_p_1   ->Draw("L");
          gr_nc_p_2   ->Draw("L");
          gr_nc_p_3   ->Draw("L");
          gr_nc_p_4   ->Draw("L");
          gr_nc_p_5   ->Draw("L");
          gr_nc_p_6   ->Draw("L");
          gr_nc_p_7   ->Draw("L");
          gr_nc_p_8   ->Draw("L");
          gr_nc_p_9   ->Draw("L");
          gr_nc_p_10  ->Draw("L");
          gr_nc_p_11  ->Draw("L");
          gr_nc_p_12  ->Draw("L");
          gr_nc_p_13  ->Draw("L");
          gr_nc_p_14  ->Draw("L");
          gr_nc_p_15  ->Draw("L");
          gr_nc_p_16  ->Draw("L");
          l->Draw();
          ls->Clear();
          ls->SetHeader(Form("RES-NC / %s+p%s",probestr,targetstr));
          ls->Draw();
	  c->Update();
     }
     // RES NC numubar+n(Fe56)
     {
	  TGraph * gr_nc_n_tot = (TGraph*) dir_curr->Get("res_nc_n");
          TGraph * gr_nc_n_1   = (TGraph*) dir_curr->Get("res_nc_n_1232P33");
          TGraph * gr_nc_n_2   = (TGraph*) dir_curr->Get("res_nc_n_1535S11");
          TGraph * gr_nc_n_3   = (TGraph*) dir_curr->Get("res_nc_n_1520D13");
          TGraph * gr_nc_n_4   = (TGraph*) dir_curr->Get("res_nc_n_1650S11");
          TGraph * gr_nc_n_5   = (TGraph*) dir_curr->Get("res_nc_n_1700D13");
          TGraph * gr_nc_n_6   = (TGraph*) dir_curr->Get("res_nc_n_1675D15");
          TGraph * gr_nc_n_7   = (TGraph*) dir_curr->Get("res_nc_n_1620S31");
          TGraph * gr_nc_n_8   = (TGraph*) dir_curr->Get("res_nc_n_1700D33");
          TGraph * gr_nc_n_9   = (TGraph*) dir_curr->Get("res_nc_n_1440P11");
          TGraph * gr_nc_n_10  = (TGraph*) dir_curr->Get("res_nc_n_1720P13");
          TGraph * gr_nc_n_11  = (TGraph*) dir_curr->Get("res_nc_n_1680F15");
          TGraph * gr_nc_n_12  = (TGraph*) dir_curr->Get("res_nc_n_1910P31");
          TGraph * gr_nc_n_13  = (TGraph*) dir_curr->Get("res_nc_n_1920P33");
          TGraph * gr_nc_n_14  = (TGraph*) dir_curr->Get("res_nc_n_1905F35");
          TGraph * gr_nc_n_15  = (TGraph*) dir_curr->Get("res_nc_n_1950F37");
          TGraph * gr_nc_n_16  = (TGraph*) dir_curr->Get("res_nc_n_1710P11");
          gr_nc_n_1 ->SetLineColor(2);
          gr_nc_n_2 ->SetLineColor(3);
          gr_nc_n_3 ->SetLineColor(4);
          gr_nc_n_4 ->SetLineColor(5);
          gr_nc_n_5 ->SetLineColor(6);
          gr_nc_n_6 ->SetLineColor(7);
          gr_nc_n_7 ->SetLineColor(8);
          gr_nc_n_8 ->SetLineColor(9);
          gr_nc_n_9 ->SetLineColor(31);
          gr_nc_n_10->SetLineColor(32);
          gr_nc_n_11->SetLineColor(33);
          gr_nc_n_12->SetLineColor(34);
          gr_nc_n_13->SetLineColor(35);
          gr_nc_n_14->SetLineColor(36);
          gr_nc_n_15->SetLineColor(37);
          gr_nc_n_16->SetLineColor(38);
          l->Clear();
          l->AddEntry(gr_nc_n_tot,"total",     "L");
          l->AddEntry(gr_nc_n_1,  "(1232)P33", "L");
          l->AddEntry(gr_nc_n_2,  "(1535)S11", "L");
          l->AddEntry(gr_nc_n_3,  "(1520)D13", "L");
          l->AddEntry(gr_nc_n_4,  "(1650)S11", "L");
          l->AddEntry(gr_nc_n_5,  "(1700)D13", "L");
          l->AddEntry(gr_nc_n_6,  "(1675)D15", "L");
          l->AddEntry(gr_nc_n_7,  "(1620)S31", "L");
          l->AddEntry(gr_nc_n_8,  "(1700)D33", "L");
          l->AddEntry(gr_nc_n_9,  "(1440)P11", "L");
          l->AddEntry(gr_nc_n_10, "(1720)P13", "L");
          l->AddEntry(gr_nc_n_11, "(1680)F15", "L");
          l->AddEntry(gr_nc_n_12, "(1910)P31", "L");
          l->AddEntry(gr_nc_n_13, "(1920)P33", "L");
          l->AddEntry(gr_nc_n_14, "(1905)F35", "L");
          l->AddEntry(gr_nc_n_15, "(1950)F37", "L");
          l->AddEntry(gr_nc_n_16, "(1710)P11", "L");
          gr_nc_n_tot ->Draw("L");
          gr_nc_n_1   ->Draw("L");
          gr_nc_n_2   ->Draw("L");
          gr_nc_n_3   ->Draw("L");
          gr_nc_n_4   ->Draw("L");
          gr_nc_n_5   ->Draw("L");
          gr_nc_n_6   ->Draw("L");
          gr_nc_n_7   ->Draw("L");
          gr_nc_n_8   ->Draw("L");
          gr_nc_n_9   ->Draw("L");
          gr_nc_n_10  ->Draw("L");
          gr_nc_n_11  ->Draw("L");
          gr_nc_n_12  ->Draw("L");
          gr_nc_n_13  ->Draw("L");
          gr_nc_n_14  ->Draw("L");
          gr_nc_n_15  ->Draw("L");
          gr_nc_n_16 ->Draw("L");
          l->Draw();
          ls->Clear();
          ls->SetHeader(Form("RES-NC / %s+n%s",probestr,targetstr));
          ls->Draw();
	  c->Update();
     }
     // DIS CC numubar+p(Fe56)
     {
	  TGraph * dis_cc_p = (TGraph*) dir_curr->Get("dis_cc_p");
          dis_cc_p->Draw("l");
	  TGraph * dis_cc_p_charm = (TGraph*) dir_curr->Get("dis_cc_p_charm");
          dis_cc_p_charm->SetLineWidth(2);
          dis_cc_p_charm->Draw("l");
          TGraph * dis_cc_p_1  = (TGraph*) dir_curr->Get("dis_cc_p_sbarsea");
          TGraph * dis_cc_p_2  = (TGraph*) dir_curr->Get("dis_cc_p_dbarsea");
          TGraph * dis_cc_p_3  = (TGraph*) dir_curr->Get("dis_cc_p_uval");
          TGraph * dis_cc_p_4  = (TGraph*) dir_curr->Get("dis_cc_p_usea");
          dis_cc_p_1->SetLineColor(2);
          dis_cc_p_2->SetLineColor(3);
          dis_cc_p_3->SetLineColor(4);
          dis_cc_p_4->SetLineColor(5);
          l->Clear();
          l->AddEntry(dis_cc_p,        "tot (-charm)",   "L");
          l->AddEntry(dis_cc_p_1,      "sbar(sea)",      "L");
          l->AddEntry(dis_cc_p_2,      "dbar(sea)",      "L");
          l->AddEntry(dis_cc_p_3,      "u(val)",         "L");
          l->AddEntry(dis_cc_p_4,      "u(sea)",         "L");
          l->AddEntry(dis_cc_p_charm,  "tot charm",      "L");
          dis_cc_p_1->Draw("L");
          dis_cc_p_2->Draw("L");
          dis_cc_p_3->Draw("L");
          dis_cc_p_4->Draw("L");
          l->Draw();
          ls->Clear();
          ls->SetHeader(Form("DIS-CC / %s+p%s",probestr,targetstr));
          ls->Draw();
	  c->Update();
     }
     // DIS CC numubar+n(Fe56)
     {
	  TGraph * dis_cc_n = (TGraph *) dir_curr->Get("dis_cc_n");
          dis_cc_n->Draw("l");
	  TGraph * dis_cc_n_charm = (TGraph*) dir_curr->Get("dis_cc_n_charm");
          dis_cc_n_charm->SetLineWidth(2);
          dis_cc_n_charm->Draw("l");
          TGraph * dis_cc_n_1  = (TGraph*) dir_curr->Get("dis_cc_n_sbarsea");
          TGraph * dis_cc_n_2  = (TGraph*) dir_curr->Get("dis_cc_n_dbarsea");
          TGraph * dis_cc_n_3  = (TGraph*) dir_curr->Get("dis_cc_n_uval");
          TGraph * dis_cc_n_4  = (TGraph*) dir_curr->Get("dis_cc_n_usea");
          dis_cc_n_1->SetLineColor(2);
          dis_cc_n_2->SetLineColor(3);
          dis_cc_n_3->SetLineColor(4);
          dis_cc_n_4->SetLineColor(5);
          l->Clear();
          l->AddEntry(dis_cc_n,        "tot (-charm)", "L");
          l->AddEntry(dis_cc_n_1,      "sbar(sea)",    "L");
          l->AddEntry(dis_cc_n_2,      "dbar(sea)",    "L");
          l->AddEntry(dis_cc_n_3,      "u(val)",       "L");
          l->AddEntry(dis_cc_n_4,      "u(sea)",       "L");
          l->AddEntry(dis_cc_n_charm,  "tot charm",    "L");
          dis_cc_n_1->Draw("L");
          dis_cc_n_2->Draw("L");
          dis_cc_n_3->Draw("L");
          dis_cc_n_4->Draw("L");
          l->Draw();
          ls->Clear();
          ls->SetHeader(Form("DIS-CC / %s+n%s",probestr,targetstr));
          ls->Draw();
	  c->Update();
     }
     // DIS NC numubar+p(Fe56)
     {
	  TGraph * dis_nc_p = (TGraph*) dir_curr->Get("dis_nc_p");
          dis_nc_p->Draw("l");
          TGraph * dis_nc_p_1  = (TGraph*) dir_curr->Get("dis_nc_p_sbarsea");
          TGraph * dis_nc_p_2  = (TGraph*) dir_curr->Get("dis_nc_p_ubarsea");
          TGraph * dis_nc_p_3  = (TGraph*) dir_curr->Get("dis_nc_p_dbarsea");
          TGraph * dis_nc_p_4  = (TGraph*) dir_curr->Get("dis_nc_p_dval");
          TGraph * dis_nc_p_5  = (TGraph*) dir_curr->Get("dis_nc_p_dsea");
          TGraph * dis_nc_p_6  = (TGraph*) dir_curr->Get("dis_nc_p_uval");
          TGraph * dis_nc_p_7  = (TGraph*) dir_curr->Get("dis_nc_p_usea");
          TGraph * dis_nc_p_8  = (TGraph*) dir_curr->Get("dis_nc_p_ssea");
          dis_nc_p_1->SetLineColor(2);
          dis_nc_p_2->SetLineColor(3);
          dis_nc_p_3->SetLineColor(4);
          dis_nc_p_4->SetLineColor(5);
          dis_nc_p_5->SetLineColor(6);
          dis_nc_p_6->SetLineColor(7);
          dis_nc_p_7->SetLineColor(8);
          dis_nc_p_8->SetLineColor(9);
          l->Clear();
          l->AddEntry(dis_nc_p,   "total",     "L");
          l->AddEntry(dis_nc_p_1, "sbar(sea)", "L");
          l->AddEntry(dis_nc_p_2, "ubar(sea)", "L");
          l->AddEntry(dis_nc_p_3, "dbar(sea)", "L");
          l->AddEntry(dis_nc_p_4, "d(val)",    "L");
          l->AddEntry(dis_nc_p_5, "d(sea)",    "L");
          l->AddEntry(dis_nc_p_6, "u(val)",    "L");
          l->AddEntry(dis_nc_p_7, "u(sea)",    "L");
          l->AddEntry(dis_nc_p_8, "s(sea)",    "L");
          dis_nc_p_1->Draw("L");
          dis_nc_p_2->Draw("L");
          dis_nc_p_3->Draw("L");
          dis_nc_p_4->Draw("L");
          dis_nc_p_5->Draw("L");
          dis_nc_p_6->Draw("L");
          dis_nc_p_7->Draw("L");
          dis_nc_p_8->Draw("L");
          l->Draw();
          ls->Clear();
          ls->SetHeader(Form("DIS-NC / %s+p%s",probestr,targetstr));
          ls->Draw();
	  c->Update();
     }
     // DIS NC numu+n(Fe56)
     {
	  TGraph * dis_nc_n = (TGraph*) dir_curr->Get("dis_nc_n");
          dis_nc_n->Draw("l");
          TGraph * dis_nc_n_1  = (TGraph*) dir_curr->Get("dis_nc_n_sbarsea");
          TGraph * dis_nc_n_2  = (TGraph*) dir_curr->Get("dis_nc_n_ubarsea");
          TGraph * dis_nc_n_3  = (TGraph*) dir_curr->Get("dis_nc_n_dbarsea");
          TGraph * dis_nc_n_4  = (TGraph*) dir_curr->Get("dis_nc_n_dval");
          TGraph * dis_nc_n_5  = (TGraph*) dir_curr->Get("dis_nc_n_dsea");
          TGraph * dis_nc_n_6  = (TGraph*) dir_curr->Get("dis_nc_n_uval");
          TGraph * dis_nc_n_7  = (TGraph*) dir_curr->Get("dis_nc_n_usea");
          TGraph * dis_nc_n_8  = (TGraph*) dir_curr->Get("dis_nc_n_ssea");
          dis_nc_n_1->SetLineColor(2);
          dis_nc_n_2->SetLineColor(3);
          dis_nc_n_3->SetLineColor(4);
          dis_nc_n_4->SetLineColor(5);
          dis_nc_n_5->SetLineColor(6);
          dis_nc_n_6->SetLineColor(7);
          dis_nc_n_7->SetLineColor(8);
          dis_nc_n_8->SetLineColor(9);
          l->Clear();
          l->AddEntry(dis_nc_n,   "total",     "L");
          l->AddEntry(dis_nc_n_1, "sbar(sea)", "L");
          l->AddEntry(dis_nc_n_2, "ubar(sea)", "L");
          l->AddEntry(dis_nc_n_3, "dbar(sea)", "L");
          l->AddEntry(dis_nc_n_4, "d(val)",    "L");
          l->AddEntry(dis_nc_n_5, "d(sea)",    "L");
          l->AddEntry(dis_nc_n_6, "u(val)",    "L");
          l->AddEntry(dis_nc_n_7, "u(sea)",    "L");
          l->AddEntry(dis_nc_n_8, "s(sea)",    "L");
          dis_nc_n_1->Draw("L");
          dis_nc_n_2->Draw("L");
          dis_nc_n_3->Draw("L");
          dis_nc_n_4->Draw("L");
          dis_nc_n_5->Draw("L");
          dis_nc_n_6->Draw("L");
          dis_nc_n_7->Draw("L");
          dis_nc_n_8->Draw("L");
          l->Draw();
          ls->Clear();
          ls->SetHeader(Form("DIS-NC / %s+n%s",probestr,targetstr));
          ls->Draw();
	  c->Update();
     }
  }//nubar
*/
}
//_________________________________________________________________________________
TH1F* DrawFrame(TGraph * gr0, TGraph * gr1)
{
  double xmin = 1E-5;
  double xmax = 1;
  double ymin = 1E-5;
  double ymax = 1;

  if(gr0) {  
    TAxis * x0 = gr0 -> GetXaxis();
    TAxis * y0 = gr0 -> GetYaxis();
    xmin = x0 -> GetXmin();
    xmax = x0 -> GetXmax();
    ymin = y0 -> GetXmin();
    ymax = y0 -> GetXmax();
  }
  if(gr1) {
     TAxis * x1 = gr1 -> GetXaxis();
     TAxis * y1 = gr1 -> GetYaxis();
     xmin = TMath::Min(xmin, x1 -> GetXmin());
     xmax = TMath::Max(xmax, x1 -> GetXmax());
     ymin = TMath::Min(ymin, y1 -> GetXmin());
     ymax = TMath::Max(ymax, y1 -> GetXmax());
  }
  xmin *= 0.5;
  xmax *= 1.5;
  ymin *= 0.5;
  ymax *= 1.5;
  xmin = TMath::Max(0.1, xmin);
  
  return DrawFrame(xmin, xmax, ymin, ymax);
}
//_________________________________________________________________________________
TH1F* DrawFrame(double xmin, double xmax, double ymin, double ymax)
{
  TH1F * hf = (TH1F*) gC->DrawFrame(xmin, ymin, xmax, ymax);
  hf->GetXaxis()->SetTitle("E (GeV)");
  hf->GetYaxis()->SetTitle("#sigma (10^{-38} cm^{2})");
  hf->GetYaxis()->SetTitleSize(0.03);
  hf->GetYaxis()->SetTitleOffset(1.3);
  hf->GetXaxis()->SetLabelSize(0.03);
  hf->GetYaxis()->SetLabelSize(0.03);
  return hf;
}
//_________________________________________________________________________________
void Draw(TGraph* gr, const char * opt)
{
  if(!gr) return;
  gr->Draw(opt);
}
//_________________________________________________________________________________
void Draw(const char * plot, const char * title)
{
  TGraph * gr_curr = (TGraph*) gDirCurr->Get(plot);
  TGraph * gr_ref0 = 0;
  if(gDirRef0) {
      gr_ref0 = (TGraph*) gDirRef0->Get(plot);
  }

  if(title) {
    gPS->NewPage();
    DrawFrame (gr_curr, gr_ref0);
  }

  // trim points in reference plot (shown with markers) so that the markers
  // don't hide the current prediction (shown with a line).
  // Keep, at most, 20 points per decade.
  TGraph * gr_ref0_trim = TrimGraph(gr_ref0, 20);

  utils::style::Format(gr_curr,      1,1,1,1,1,1.0);
  utils::style::Format(gr_ref0_trim, 1,1,1,2,4,1.0);

  Draw (gr_curr,      "L");
  Draw (gr_ref0_trim, "P");

  if(title) {
    gLS->SetHeader(title);
    gLS->Draw();
    gC ->Update();
  }

  if(gr_ref0_trim) {
    delete gr_ref0_trim;
  }
}
//_________________________________________________________________________________
TGraph * TrimGraph(TGraph * gr, int max_np_per_decade)
{
  if(!gr) return 0;

  const int np = gr->GetN();
  vector<bool> remv(np);

  int    fp   = 0; 
  int    lp   = 0; 

  while(1) {
    double xmin = gr->GetX()[fp];
    double xmax = 10 * xmin;
    int ndec = 0;
    for(int i=fp; i<np; i++) {
       remv[i] = false;
       lp = i;
       double x = gr->GetX()[i];
       if(x > xmin && x <= xmax) ndec++;
       if(x > xmax) break;
    }
    if(ndec > max_np_per_decade) {
/*
       RandomGen * rgen = RandomGen::Instance();
       double keep_prob = (double)max_np_per_decade/ (double) ndec;
       for(int i=fp; i<=lp; i++) {
           double r = rgen->RndGen().Rndm();
           if(r > keep_prob) { remv[i] = true; }
       }
*/
       double keep_prob = (double)max_np_per_decade/ (double) ndec;
       int keep_rate = TMath::FloorNint(1./keep_prob);
       int ithrow = 0;
       for(int i=fp; i<=lp; i++) {
         if(ithrow % keep_rate) {
           remv[i] = true;
         }
         ithrow++;
       } 
    }
    if(lp == np-1) break;
    fp = lp+1;
  }
 
  int np2 = 0;
  for(int i=0; i<np; i++) {
   if(!remv[i]) {
     np2++;
   }
  }

  double * x = new double[np2];
  double * y = new double[np2];

  int j=0;
  for(int i=0; i<np; i++) {
   if(!remv[i]) {
     x[j] = gr->GetX()[i];
     y[j] = gr->GetY()[i];
     j++;
   }
  }
  TGraph * gr2 = new TGraph(np2,x,y);

  delete [] x;
  delete [] y;

  return gr2;
}
//_________________________________________________________________________________
void GetCommandLineArgs(int argc, char ** argv)
{
  LOG("gvldtest", pINFO) << "*** Parsing command line arguments";

  CmdLnArgParser parser(argc,argv);

  // get input GENIE cross section file
  if( parser.OptionExists('f') ) {
    gOptXSecFilename_curr = parser.ArgAsString('f');
    bool ok = CheckRootFilename(gOptXSecFilename_curr.c_str());
    if(!ok) {
      PrintSyntax();
      exit(1);
    }
  } else {
    PrintSyntax();
    exit(1);
  }

  // get [reference] input GENIE cross section file
  if( parser.OptionExists('r') ) {
    gOptXSecFilename_ref0 = parser.ArgAsString('r');
    bool ok = CheckRootFilename(gOptXSecFilename_ref0.c_str());
    if(!ok) {
      PrintSyntax();
      exit(1);
    }
    gOptHaveRef = true;
  } else {
    LOG("gvldtest", pNOTICE) << "No reference cross section file";
    gOptHaveRef = false;
  }

  // get output filename
  if( parser.OptionExists('o') ) {
    gOptOutputFilename = parser.ArgAsString('o');
  } else {
    gOptOutputFilename = "gxsec.ps";
  }

}
//_________________________________________________________________________________
void PrintSyntax(void)
{
  LOG("gvldtest", pNOTICE)
    << "\n\n" << "Syntax:" << "\n"
    << "   gvld_xsec_comp  -f xsec_file [-r reference_xsec_file] [-o output]\n";
}
//_________________________________________________________________________________
bool CheckRootFilename(string filename)
{
  if(filename.size() == 0) return false;

  bool is_accessible = ! (gSystem->AccessPathName(filename.c_str()));
  if (!is_accessible) {
   LOG("gvldtest", pERROR)
       << "The input ROOT file [" << filename << "] is not accessible";
   return false;
  }
  return true;
}
//_________________________________________________________________________________
string OutputFileName(string inpname)
{
// Builds the output filename based on the name of the input filename
// Perfors the following conversion: name.root -> name.nuxsec_test.ps

  unsigned int L = inpname.length();

  // if the last 4 characters are "root" (ROOT file extension) then
  // remove them
  if(inpname.substr(L-4, L).find("root") != string::npos) {
    inpname.erase(L-4, L);
  }

  ostringstream name;
  name << inpname << "nuxsec_test.ps";

  return gSystem->BaseName(name.str().c_str());
}
//_________________________________________________________________________________

